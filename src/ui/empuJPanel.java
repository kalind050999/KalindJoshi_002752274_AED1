/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Image;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.emprec;
import model.emprechis;

/**
 *
 * @author kalindjoshi
 */
public class empuJPanel extends javax.swing.JPanel {
    emprechis his;
    /**
     * Creates new form empuJPanel
     */
    public empuJPanel() {
        initComponents();
    }
    
    public empuJPanel(emprechis his) {
        initComponents();
        this.his = his;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchName = new javax.swing.JComboBox<>();
        newName = new javax.swing.JComboBox<>();
        updateBtn = new javax.swing.JButton();
        nameTxt = new javax.swing.JTextField();
        newnameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Age = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        upnameTxt = new javax.swing.JTextField();
        upageTxt = new javax.swing.JTextField();
        uptitleTxt = new javax.swing.JTextField();
        upgenderTxt = new javax.swing.JTextField();
        upcellTxt = new javax.swing.JTextField();
        uplevelTxt = new javax.swing.JTextField();
        upjoinTxt = new javax.swing.JTextField();
        upinfoTxt = new javax.swing.JTextField();
        upidTxt = new javax.swing.JTextField();
        upemailTxt = new javax.swing.JTextField();
        photolabel = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Update an Employee ");

        jLabel2.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel2.setText("Search a Record");

        jLabel3.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel3.setText("New detail");

        searchName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        searchName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Cell Phone", "Email" }));
        searchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNameActionPerformed(evt);
            }
        });

        newName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        newName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "ID", "Cell Phone", "Email" }));
        newName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNameActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(153, 255, 0));
        updateBtn.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Updated Details");

        jLabel5.setText("Name");

        jLabel6.setText("ID");

        jLabel7.setText("Join Date");

        jLabel8.setText("Team Info");

        jLabel9.setText("Gender");

        Age.setText("Age");

        jLabel11.setText("Level");

        jLabel12.setText("Photo");

        jLabel13.setText("Email");

        jLabel14.setText("Cell");

        jLabel15.setText("Title");

        upnameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upnameTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330)
                        .addComponent(updateBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, Short.MAX_VALUE)
                        .addComponent(newName, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(newnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(upgenderTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Age, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(upnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(upidTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(upageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(upjoinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel15)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel12))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(uplevelTxt)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(upemailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(upinfoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(uptitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(upcellTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(photolabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(0, 0, Short.MAX_VALUE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addComponent(upnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(upidTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Age)
                    .addComponent(upageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(upgenderTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(upjoinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(uplevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(upinfoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(uptitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(upcellTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(upemailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addComponent(photolabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchNameActionPerformed

    private void newNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newNameActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
        HashMap<String,Integer> IndexKey = new HashMap<String,Integer>();
        IndexKey.put("Name", 0);
        IndexKey.put("ID", 1);
        IndexKey.put("Age", 2);
        IndexKey.put("Gender", 3);
        IndexKey.put("Date", 4);
        IndexKey.put("Level", 5);
        IndexKey.put("Info", 6);
        IndexKey.put("Pos", 7);
        IndexKey.put("Mobile", 8);
        IndexKey.put("Email", 9);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        ArrayList<emprec> emlist = his.getHis();
        String fetch = searchName.getSelectedItem().toString();
        String fetchTxt = nameTxt.getText().toString();
        String newupdate = newName.getSelectedItem().toString();
        String newupdateTxt = newnameTxt.getText().toString();
        
        Object tired[] = new Object[11];
        String fetchChk = null;
        int l,p;
        int flag = 0;
        l = 0;
        p = IndexKey.get(newupdate);
        
        for (int i=0; i<emlist.size(); i++)
        {
            if( (fetch == "Name")  && (fetchTxt.equals(emlist.get(i).getName())) ){
                fetchChk = String.valueOf(emlist.get(i).getName());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "ID")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getID())) )){
                fetchChk = String.valueOf(emlist.get(i).getID());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Age")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getAge())) )){
                fetchChk = String.valueOf(emlist.get(i).getAge());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Gender")  && (fetchTxt.equals(emlist.get(i).getGender())) ){
                fetchChk = String.valueOf(emlist.get(i).getGender());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Date")  && (fetchTxt.equals(emlist.get(i).getDate())) ){
                fetchChk = String.valueOf(emlist.get(i).getDate());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Level")  && (fetchTxt.equals(emlist.get(i).getLevel())) ){
                fetchChk = String.valueOf(emlist.get(i).getLevel());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Info")  && (fetchTxt.equals(emlist.get(i).getInfo())) ){
                fetchChk = String.valueOf(emlist.get(i).getInfo());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Pos")  && (fetchTxt.equals(emlist.get(i).getPos())) ){
                fetchChk = String.valueOf(emlist.get(i).getPos());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Mobile")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getMobile()))) ){
                fetchChk = String.valueOf(emlist.get(i).getMobile());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
            if( (fetch == "Email")  && (fetchTxt.equals(emlist.get(i).getEmail())) ){
                fetchChk = String.valueOf(emlist.get(i).getEmail());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                }
            }
        }
        
        if (flag == 0){
            JOptionPane.showMessageDialog(this, "No Employee exists");
        }
        else if (flag >=2)
        {
        JOptionPane.showMessageDialog(this, "More than one entries found");
        }
        else{
            for (int i=0; i<emlist.size(); i++)
            {
                if( (fetch == "Name")  && (fetchTxt.equals(emlist.get(i).getName())) ){
                    fetchChk = String.valueOf(emlist.get(i).getName());
                    if(fetchChk.equals(fetchTxt.toString())){
                        l = i;
                        flag++;
                        if(fetchChk.equals(fetchTxt)){
                            tired[0] = emlist.get(i).getName();
                            tired[1] = emlist.get(i).getID();
                            tired[2] = emlist.get(i).getAge();
                            tired[3] = emlist.get(i).getGender();
                            tired[4] = emlist.get(i).getDate();
                            tired[5] = emlist.get(i).getLevel();
                            tired[6] = emlist.get(i).getInfo();
                            tired[7] = emlist.get(i).getPos();
                            tired[8] = emlist.get(i).getMobile();
                            tired[9] = emlist.get(i).getEmail();
                            tired[p]= newupdateTxt;

                            if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                            if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                            if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                            if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                            if(newupdate == "StartDate"){try {
                                emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                                } catch (ParseException ex) {
                                    Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
}
                            if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                            if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                            if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                            if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                            if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                        }
                    }
                if( (fetch == "ID")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getID()))) ){
                    fetchChk = String.valueOf(emlist.get(i).getID());
                    if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                        }
                    }
                } 
                
                if( (fetch == "Age")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getAge()))) ){
                    fetchChk = String.valueOf(emlist.get(i).getAge());
                    if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                        }
                    }
                }
                
                if( (fetch == "Gender")  && (fetchTxt.equals(emlist.get(i).getGender())) ){
                    fetchChk = String.valueOf(emlist.get(i).getGender());
                    if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }
            }
            if( (fetch == "Date")  && (fetchTxt.equals(emlist.get(i).getDate())) ){
                fetchChk = String.valueOf(emlist.get(i).getDate());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }    
            }
            if( (fetch == "Level")  && (fetchTxt.equals(emlist.get(i).getLevel())) ){
                fetchChk = String.valueOf(emlist.get(i).getLevel());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }
            }
            if( (fetch == "Pos")  && (fetchTxt.equals(emlist.get(i).getPos())) ){
                fetchChk = String.valueOf(emlist.get(i).getPos());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }
            }
            if( (fetch == "Mobile")  && (fetchTxt.equals(String.valueOf(emlist.get(i).getMobile()))) ){
                fetchChk = String.valueOf(emlist.get(i).getMobile());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }
            }
            if( (fetch == "Email")  && (fetchTxt.equals(emlist.get(i).getEmail())) ){
                fetchChk = String.valueOf(emlist.get(i).getEmail());
                if(fetchChk.equals(fetchTxt.toString())){
                    l = i;
                    flag++;
                    if(fetchChk.equals(fetchTxt)){
                        tired[0] = emlist.get(i).getName();
                        tired[1] = emlist.get(i).getID();
                        tired[2] = emlist.get(i).getAge();
                        tired[3] = emlist.get(i).getGender();
                        tired[4] = emlist.get(i).getDate();
                        tired[5] = emlist.get(i).getLevel();
                        tired[6] = emlist.get(i).getInfo();
                        tired[7] = emlist.get(i).getPos();
                        tired[8] = emlist.get(i).getMobile();
                        tired[9] = emlist.get(i).getEmail();
                        tired[p]= newupdateTxt;

                        if(newupdate == "Name"){emlist.get(i).setName(newupdateTxt);}
                        if(newupdate == "EmployeeID"){emlist.get(i).setID(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Age"){emlist.get(i).setAge(Integer.parseInt(newupdateTxt));}
                        if(newupdate == "Gender"){emlist.get(i).setGender(String.valueOf(newupdateTxt));}
                        if(newupdate == "StartDate"){try {
                            emlist.get(i).setDate(dateFormat.parse(newupdateTxt));
                            } catch (ParseException ex) {
                                Logger.getLogger(empuJPanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
}
                        if(newupdate == "Level"){emlist.get(i).setLevel(String.valueOf(newupdateTxt));}
                        if(newupdate == "TeamInfo"){emlist.get(i).setInfo(String.valueOf(newupdateTxt));}
                        if(newupdate == "PositionTitle"){emlist.get(i).setPos(String.valueOf(newupdateTxt));}
                        if(newupdate == "CellPhoneNumber"){emlist.get(i).setMobile(Long.parseLong(newupdateTxt));}
                        if(newupdate == "EmailAddress"){emlist.get(i).setEmail(String.valueOf(newupdateTxt));}
                    }
                }
            }
            
        }     
       
                upnameTxt.setText(String.valueOf(tired[0]));
                upidTxt.setText(String.valueOf(tired[1]));
                upageTxt.setText(String.valueOf(tired[2]));
                upgenderTxt.setText(String.valueOf(tired[3]));
                upjoinTxt.setText(String.valueOf(tired[4]));
                uplevelTxt.setText(String.valueOf(tired[5]));
                upinfoTxt.setText(String.valueOf(tired[6]));
                uptitleTxt.setText(String.valueOf(tired[7]));
                upcellTxt.setText(String.valueOf(tired[8]));
                upemailTxt.setText(String.valueOf(tired[9]));
                
            }
        }
                
        
        
        
    }//GEN-LAST:event_updateBtnActionPerformed

    private void upnameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upnameTxtActionPerformed
          // TODO add your handling code here:
    }//GEN-LAST:event_upnameTxtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Age;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JComboBox<String> newName;
    private javax.swing.JTextField newnameTxt;
    private javax.swing.JLabel photolabel;
    private javax.swing.JComboBox<String> searchName;
    private javax.swing.JTextField upageTxt;
    private javax.swing.JTextField upcellTxt;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField upemailTxt;
    private javax.swing.JTextField upgenderTxt;
    private javax.swing.JTextField upidTxt;
    private javax.swing.JTextField upinfoTxt;
    private javax.swing.JTextField upjoinTxt;
    private javax.swing.JTextField uplevelTxt;
    private javax.swing.JTextField upnameTxt;
    private javax.swing.JTextField uptitleTxt;
    // End of variables declaration//GEN-END:variables
}
