/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Parser.Parser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Com;
import model.Doc;
import model.DocDir;
import model.HeadClass;
import model.Hosp;
import model.HospDir;
import model.Pat;
import model.PatDir;
import model.Person;
import model.PersonDir;

/**
 *
 * @author kalindjoshi
 */
public class HospPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospPanel
     */
    
    String[] comList;
    PatDir patDir;
    Hosp newHosp;
    City city;
    HospDir hospDir;
    HeadClass headclass;
    DefaultTableModel hospTableModel;
    DefaultTableModel DocModel;
    DefaultTableModel PerModel;
    Hosp hosp;
    PersonDir perDir;
    Hosp selectHosp;
    Person selectPer;
    DocDir docDir;
    Com com;
    boolean hospAdminLogin;
    Parser parser = new Parser();
    
    public HospPanel() {
        initComponents();
    }
    
    public HospPanel(DocDir doctorDirectory, HeadClass headclass, String[] communityList, PatDir patientDirectory, Hosp newHospital, City city, HospDir hospitalDirectory, PersonDir personDirectory)
    {
        initComponents();
        this.comList = communityList;
        this.newHosp = newHospital;
        this.city = city;
        this.patDir = patientDirectory;
        this.hospDir = hospitalDirectory;
        this.headclass = headclass;
        this.docDir = doctorDirectory;
        this.perDir = personDirectory;
        
        HosLogin.setVisible(true);
        
        ArrayList<Integer> hospNum = new ArrayList<Integer>();
        for(Com c: city.getComList()){
            for(Hosp h: c.getHospitalList()){
                hospNum.add(h.getHospNum());
            }
        }
        hospNo.removeAllItems();
        for(int s: hospNum){
            hospNo.addItem(String.valueOf(s));
        }
        
        hospComBox.removeAllItems();
        hospCityBox.removeAllItems();
        for(City c: headclass.getCityList()){
            hospCityBox.addItem(c.getCityName());
        }
        
        hospTableModel = (DefaultTableModel) hospTable.getModel();
        DocModel = (DefaultTableModel) manageDocTable.getModel();
        PerModel = (DefaultTableModel) managePerTable.getModel();
        populateHospTable();
        populateManageTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        HosLogin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        HospIdTxt = new javax.swing.JTextField();
        HospPassTxt = new javax.swing.JTextField();
        hospLogin = new javax.swing.JButton();
        HospPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hospTable = new javax.swing.JTable();
        updateFilterBox = new javax.swing.JComboBox<>();
        updateFieldText = new javax.swing.JTextField();
        updateHospital = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        hospNumberField = new javax.swing.JTextField();
        hospStName = new javax.swing.JTextField();
        hospComBox = new javax.swing.JComboBox<>();
        hospCityBox = new javax.swing.JComboBox<>();
        createHospital = new javax.swing.JButton();
        manageDoctors = new javax.swing.JButton();
        popCommunityButton = new javax.swing.JButton();
        DocPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        manageDocTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        managePerTable = new javax.swing.JTable();
        assignDoctor = new javax.swing.JButton();
        hospNo = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setLayout(new java.awt.CardLayout());

        jLabel1.setText("Hosp ID");

        jLabel2.setText("Password");

        hospLogin.setText("Login");
        hospLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HosLoginLayout = new javax.swing.GroupLayout(HosLogin);
        HosLogin.setLayout(HosLoginLayout);
        HosLoginLayout.setHorizontalGroup(
            HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HosLoginLayout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hospLogin)
                    .addGroup(HosLoginLayout.createSequentialGroup()
                        .addGroup(HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HospPassTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(HospIdTxt))))
                .addGap(0, 173, Short.MAX_VALUE))
        );
        HosLoginLayout.setVerticalGroup(
            HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HosLoginLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addGroup(HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(HospIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(HosLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(HospPassTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(hospLogin)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        add(HosLogin, "card2");

        hospTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Hosp No", "StreetName", "Community", "City", "Doctors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(hospTable);

        updateFilterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "streetName", "ZIPCode" }));

        updateHospital.setText("Update Details");
        updateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Hospital Number:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Street Name:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Community:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("City:");

        hospComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospComBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospComBoxActionPerformed(evt);
            }
        });

        hospCityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospCityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospCityBoxActionPerformed(evt);
            }
        });

        createHospital.setText("Create New Hospital");
        createHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHospitalActionPerformed(evt);
            }
        });

        manageDoctors.setText("Manage Doctor");
        manageDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorsActionPerformed(evt);
            }
        });

        popCommunityButton.setText("Pop Community");
        popCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popCommunityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HospPanelLayout = new javax.swing.GroupLayout(HospPanel);
        HospPanel.setLayout(HospPanelLayout);
        HospPanelLayout.setHorizontalGroup(
            HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HospPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(createHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(manageDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(HospPanelLayout.createSequentialGroup()
                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HospPanelLayout.createSequentialGroup()
                            .addGap(70, 70, 70)
                            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HospPanelLayout.createSequentialGroup()
                                    .addComponent(updateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(updateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(updateHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(60, 60, 60))
                                .addComponent(popCommunityButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HospPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(HospPanelLayout.createSequentialGroup()
                                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(HospPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospStName, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(HospPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(26, 26, 26)
                                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(HospPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(HospPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(hospCityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        HospPanelLayout.setVerticalGroup(
            HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HospPanelLayout.createSequentialGroup()
                .addContainerGap(384, Short.MAX_VALUE)
                .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createHospital)
                    .addComponent(manageDoctors))
                .addGap(50, 50, 50))
            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(HospPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(updateHospital)
                        .addComponent(updateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(HospPanelLayout.createSequentialGroup()
                            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hospNumberField)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hospStName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(146, Short.MAX_VALUE))
                        .addGroup(HospPanelLayout.createSequentialGroup()
                            .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(hospComBox)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(HospPanelLayout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addGroup(HospPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hospCityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(18, 18, 18)
                            .addComponent(popCommunityButton)
                            .addGap(86, 86, 86)))))
        );

        add(HospPanel, "card3");

        manageDocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "Name", "Age", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(manageDocTable);

        managePerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "BirthDate", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(managePerTable);

        assignDoctor.setText("Assign Doctor");
        assignDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignDoctorActionPerformed(evt);
            }
        });

        hospNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout DocPanelLayout = new javax.swing.GroupLayout(DocPanel);
        DocPanel.setLayout(DocPanelLayout);
        DocPanelLayout.setHorizontalGroup(
            DocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DocPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(DocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DocPanelLayout.createSequentialGroup()
                        .addComponent(assignDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hospNo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        DocPanelLayout.setVerticalGroup(
            DocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DocPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DocPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignDoctor)
                    .addComponent(hospNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        add(DocPanel, "card4");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
        );

        add(jPanel4, "card5");
    }// </editor-fold>//GEN-END:initComponents

    private void updateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalActionPerformed
        // TODO add your handling code here:
        if(hospTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "");
        }
        else{
            int hospitalID = (int)hospTableModel.getValueAt(hospTable.getSelectedRow(), 0);
            String inpUpdate = updateFieldText.getText().toString();
            for(Com c: city.getComList()){
                for(Hosp h: c.getHospitalList()){
                    if(hospitalID == h.getHospNum()){
                        hosp = h;
                    }
                }
            }
            String updateFilter = updateFilterBox.getSelectedItem().toString();
            if(updateFilter == " "){
                JOptionPane.showMessageDialog(this, "");
            }
            else{
                if(updateFilter == "streetName"){
                    String hospUpdate = inpUpdate;
                    hosp.setStreetName(hospUpdate);
                    populateHospTable();
                }
                
            }
        }

        
    }//GEN-LAST:event_updateHospitalActionPerformed

    private void hospComBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospComBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospComBoxActionPerformed

    private void hospCityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospCityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospCityBoxActionPerformed

    private void createHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHospitalActionPerformed
        // TODO add your handling code here:
        int hospitalNumber = Integer.parseInt(hospNumberField.getText());
        boolean hospitalNumberCheck = false;
        
        for (Com c: city.getComList()){
            for (Hosp h: c.getHospitalList()){
                if(h.getHospNum() == hospitalNumber){
                    JOptionPane.showMessageDialog(this,"Hospital already exists");
                    hospitalNumberCheck = true;
                }
            }
        }
        if(!hospitalNumberCheck){
            String hospitalStreetName = hospStName.getText().toString();
            
            String hospitalCommunity = hospComBox.getSelectedItem().toString();
            String hospitalCity = hospCityBox.getSelectedItem().toString();
            
            hospDir.createHosp(hospitalNumber, hospitalStreetName, hospitalCommunity, hospitalCity);
            for(City c: headclass.getCityList()){
                for(Com cm: c.getComList()){
                    if(cm.getComName() == hospitalCommunity){
                        com = cm;
                    }
                }
            }
            com.createHospital(hospitalNumber, hospitalStreetName, hospitalCommunity, hospitalCity);
            populateHospTable();
            JOptionPane.showMessageDialog(this, "This Hospital has been succesfully added to the " + String.valueOf(hospitalCommunity) + "community");
            
            hospNumberField.setText("");
            hospStName.setText("");
            
            hospComBox.setSelectedItem("");
            hospCityBox.setSelectedItem("");
        }  
    }//GEN-LAST:event_createHospitalActionPerformed

    private void manageDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorsActionPerformed
        // TODO add your handling code here:
        HospPanel.setVisible(false);
        DocPanel.setVisible(true);
        
        populateManageTable();
    }//GEN-LAST:event_manageDoctorsActionPerformed

    private void popCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popCommunityButtonActionPerformed
        // TODO add your handling code here:
        hospComBox.removeAllItems();
        String comCity = String.valueOf(hospCityBox.getSelectedItem());
        for(City c: headclass.getCityList()){
            if(comCity == c.getCityName()){
                for(Com com: c.getComList()){
                    hospComBox.addItem(com.getComName());
                }
            }
        }
    }//GEN-LAST:event_popCommunityButtonActionPerformed

    private void assignDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignDoctorActionPerformed
        // TODO add your handling code here:

        if(managePerTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Select a person to add");
        }
        if(hospNo.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Select a hospital to add doctor to");
        }
        else{
            long personNumber = (long)PerModel.getValueAt(managePerTable.getSelectedRow(),3);
            for(Person p : perDir.getPersonList()){
                if(personNumber == p.getMob()){
                    selectPer = p;
                }
            }
            for(Hosp h : hospDir.getHospList()){
                if(Integer.parseInt((String)hospNo.getSelectedItem()) == h.getHospNum()){
                    selectHosp = h;
                }
            }
            boolean doctorCheck = false;
            for(Pat p: patDir.getPatList()){
                if(p.matchByContact(selectPer.getMob())){
                    JOptionPane.showMessageDialog(this, "A patient cannot become a doctor");
                    doctorCheck = true;
                }
            }
            if(!doctorCheck){
                Doc new_doc = selectHosp.addDoctorToHospital(new Doc(selectPer));
                docDir.addDoc(new_doc);
                JOptionPane.showMessageDialog(this, "Succesfully added " + selectPer.getName() + " to Hospital");
                doctorCheck = false;
            }
        }
        populateManageTable();
    }//GEN-LAST:event_assignDoctorActionPerformed

    private void hospLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospLoginActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(HospIdTxt.getText()) && !parser.checkNull(HospIdTxt.getText())){
            long hospitalAdminIDCred = Long.parseLong(HospIdTxt.getText());
            if(!parser.checkNull(HospPassTxt.getText())){
                String hospitalAdminPassCred = String.valueOf(HospPassTxt.getText());
                long hAIC = Long.parseLong("1234");
                String hAPC = "HospAd1234";

                if(hAIC == hospitalAdminIDCred && (hAPC == null ? hospitalAdminPassCred == null : String.valueOf(hAPC).equals(hospitalAdminPassCred))){
                    hospAdminLogin = true;
                }
                if(hospAdminLogin){
                    HosLogin.setVisible(false);
                    HospPanel.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Login needed for this action");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password cannot be empty");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "PatientID should be number, and not empty");
        }   
    }//GEN-LAST:event_hospLoginActionPerformed

    public void populateHospTable(){
        hospTableModel.setRowCount(0);
        for(Com c: city.getComList()){
            for(Hosp h: c.getHospitalList()){
                Object[] row = new Object[5];
                row[0] = h.getHospNum();
                row[1] = h.getStreetName();
                row[2] = h.getCom();
                row[3] = h.getCity();
                row[4] = (h.getDoctorHosp().size());
                hospTableModel.addRow(row);
            }
        }
    }
    
    public void populateManageTable(){
        DocModel.setRowCount(0);
        PerModel.setRowCount(0);
        
        long[] doctorCountNumber = new long[docDir.getDocList().size()];
        
        for(int i=0; i<(docDir.getDocList()).size(); i++){
            doctorCountNumber[i] = docDir.getDocList().get(i).getPerson().getMob();
        }
        for (Person p : perDir.getPersonList()) {
            boolean a = true;
            for(long i : doctorCountNumber){
                if(i == p.getMob()){
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];
                row[0] = p.getName();
                row[1] = p.getDob();
                row[2] = p.getCom();
                row[3] = p.getMob();
                PerModel.addRow(row);
                a = true;
            }
        }
        for(Doc d: docDir.getDocList()){
            Object[] row = new Object[5];
            row[0] = d.getDid();
            row[1] = d.getPerson().getName();
            row[2] = d.getPerson().getAge();
            row[3] = d.getPerson().getCom();
            row[4] = d.getPerson().getMob();
            DocModel.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DocPanel;
    private javax.swing.JPanel HosLogin;
    private javax.swing.JTextField HospIdTxt;
    private javax.swing.JPanel HospPanel;
    private javax.swing.JTextField HospPassTxt;
    private javax.swing.JButton assignDoctor;
    private javax.swing.JButton createHospital;
    private javax.swing.JComboBox<String> hospCityBox;
    private javax.swing.JComboBox<String> hospComBox;
    private javax.swing.JButton hospLogin;
    private javax.swing.JComboBox<String> hospNo;
    private javax.swing.JTextField hospNumberField;
    private javax.swing.JTextField hospStName;
    private javax.swing.JTable hospTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable manageDocTable;
    private javax.swing.JButton manageDoctors;
    private javax.swing.JTable managePerTable;
    private javax.swing.JButton popCommunityButton;
    private javax.swing.JTextField updateFieldText;
    private javax.swing.JComboBox<String> updateFilterBox;
    private javax.swing.JButton updateHospital;
    // End of variables declaration//GEN-END:variables
}
