/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Com;
import model.DocDir;
import model.Encounter;
import model.EncounterHis;
import model.HeadClass;
import model.Hosp;
import model.HospDir;
import model.House;
import model.Pat;
import model.PatDir;
import model.Person;
import model.PersonDir;
import model.VitalSigns;

/**
 *
 * @author kalindjoshi
 */
public class SysAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form SysAdminPanel
     */
    
    City city;
    String[] comList;
    String[] comDropboxList;
    PatDir patDir;
    Hosp newHosp;
    HospDir hospDir;
    EncounterHis encounterDir;
    PersonDir pd;
    DocDir docDir;
    HeadClass sys;
    Pat pat;
    Pat pat1;
    DefaultTableModel model_dr;
    DefaultTableModel model_dr1;
    ArrayList<Pat> patList;
    Pat selectedPat;
    VitalSigns selectedPatVitalSigns;
    Encounter enc;
    DefaultTableModel model_hosp;
    DefaultTableModel model;
    String selectedCom;
    Com com;
    Hosp hosp;
    HospDir hospDirectory;
    Person selectedPerson;
    Hosp selectedHosp;
    
    public SysAdminPanel()
    {
        initComponents();
    }
    
    public SysAdminPanel(City city, String[] communityDropboxList, PatDir patDir, HospDir hospDir,PersonDir pd, DocDir docDir, HeadClass sys){
        initComponents();
        this.city = city;
        this.communityDropboxList = communityDropboxList;
        this.pd=pd;
        this.docDir=docDir;
        this.sys = sys;
        this.patDir = patDir;
        this.hospDir = hospDir;
       
        patList = patDir.getPatList();
        this.docDir = docDir;
        
        showPersonTable();
        showCityTable();
        showCommunityTable();
        showPatientTable();
        
        
        for(Com commList:city.getComList()){
            for(House hosList: commList.getHouseList()){
                houselistComboBox.addItem(String.valueOf(hosList.getHouseNum()));
            }
        }
        
        community_dropbox.removeAllItems();
        for(Com c: city.getComList()){
            community_dropbox.addItem(c.getComName());
        }
        
//        for(House h: community.getHouseList()){
        model_dr = (DefaultTableModel) person_dir_table.getModel();
        model_dr.setRowCount(0);
        
        model_dr1 = (DefaultTableModel) person_directory_table.getModel();
        model_dr1.setRowCount(0);
        
        model = (DefaultTableModel) hospital_table.getModel();
        
        for(Pat p:patList){
            Object[] row= new Object[3];
            row[0]= p.getId();
            row[1]= p.getPerson().getName();
            row[2]= p.getPerson().getAge();
            model_dr.addRow(row);
            model_dr1.addRow(row);
        }
        
        patient_dropbox.removeAllItems();
        for(Pat p: patDir.getPatList()){
            patient_dropbox.addItem(String.valueOf(p.getId()));
        }
        
        
        ArrayList<Integer> aa = new ArrayList<Integer>();
            
    for(Com c: city.getComList()){
        for(Hosp h: c.getHospitalList()){
            aa.add(h.getHospNum());
        }      
    }
            
    hopital_list.removeAllItems();
      
    for(int s:aa){
       hopital_list.addItem(String.valueOf(s));
        }
    
    }

    private void initComponents() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SysLogin = new javax.swing.JPanel();
        sysAdminIDText = new javax.swing.JLabel();
        sysAdminPassText = new javax.swing.JLabel();
        SysAdminIDField = new javax.swing.JTextField();
        SysAdminPassField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        SysMenu = new javax.swing.JPanel();
        ManageCom = new javax.swing.JButton();
        ManageDoc = new javax.swing.JButton();
        ManageHos = new javax.swing.JButton();
        ManagePat = new javax.swing.JButton();
        ManagePer = new javax.swing.JButton();
        ManageEnc = new javax.swing.JButton();
        SysPat = new javax.swing.JPanel();
        SysPer = new javax.swing.JPanel();
        SysDoc = new javax.swing.JPanel();
        SysEnc = new javax.swing.JPanel();
        SysHos = new javax.swing.JPanel();
        SysCom = new javax.swing.JPanel();

        setLayout(new java.awt.CardLayout());

        sysAdminIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sysAdminIDText.setText(" Sys ID:");

        sysAdminPassText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sysAdminPassText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SysLoginLayout = new javax.swing.GroupLayout(SysLogin);
        SysLogin.setLayout(SysLoginLayout);
        SysLoginLayout.setHorizontalGroup(
            SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SysLoginLayout.createSequentialGroup()
                .addGroup(SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SysLoginLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(sysAdminPassText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SysLoginLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(sysAdminIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SysAdminIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(SysAdminPassField))
                .addGap(109, 109, 109))
        );
        SysLoginLayout.setVerticalGroup(
            SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SysLoginLayout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addGroup(SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SysAdminIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sysAdminIDText))
                .addGap(18, 18, 18)
                .addGroup(SysLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sysAdminPassText)
                    .addComponent(SysAdminPassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(loginButton)
                .addContainerGap(291, Short.MAX_VALUE))
        );

        add(SysLogin, "card9");

        ManageCom.setText("Manage Community");
        ManageCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageComActionPerformed(evt);
            }
        });

        ManageDoc.setText("Manage Doctor");

        ManageHos.setText("Manage Hospital");

        ManagePat.setText("Manage Patient");

        ManagePer.setText("Manage Person");
        ManagePer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManagePerActionPerformed(evt);
            }
        });

        ManageEnc.setText("Manage Encounter");

        javax.swing.GroupLayout SysMenuLayout = new javax.swing.GroupLayout(SysMenu);
        SysMenu.setLayout(SysMenuLayout);
        SysMenuLayout.setHorizontalGroup(
            SysMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SysMenuLayout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addGroup(SysMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ManageDoc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ManageEnc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ManageCom, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(ManageHos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ManagePat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ManagePer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(232, Short.MAX_VALUE))
        );
        SysMenuLayout.setVerticalGroup(
            SysMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SysMenuLayout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .addComponent(ManagePer)
                .addGap(18, 18, 18)
                .addComponent(ManagePat)
                .addGap(18, 18, 18)
                .addComponent(ManageHos)
                .addGap(18, 18, 18)
                .addComponent(ManageDoc)
                .addGap(19, 19, 19)
                .addComponent(ManageEnc)
                .addGap(18, 18, 18)
                .addComponent(ManageCom)
                .addGap(228, 228, 228))
        );

        add(SysMenu, "card8");

        javax.swing.GroupLayout SysPatLayout = new javax.swing.GroupLayout(SysPat);
        SysPat.setLayout(SysPatLayout);
        SysPatLayout.setHorizontalGroup(
            SysPatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysPatLayout.setVerticalGroup(
            SysPatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysPat, "card3");

        javax.swing.GroupLayout SysPerLayout = new javax.swing.GroupLayout(SysPer);
        SysPer.setLayout(SysPerLayout);
        SysPerLayout.setHorizontalGroup(
            SysPerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysPerLayout.setVerticalGroup(
            SysPerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysPer, "card4");

        javax.swing.GroupLayout SysDocLayout = new javax.swing.GroupLayout(SysDoc);
        SysDoc.setLayout(SysDocLayout);
        SysDocLayout.setHorizontalGroup(
            SysDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysDocLayout.setVerticalGroup(
            SysDocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysDoc, "card5");

        javax.swing.GroupLayout SysEncLayout = new javax.swing.GroupLayout(SysEnc);
        SysEnc.setLayout(SysEncLayout);
        SysEncLayout.setHorizontalGroup(
            SysEncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysEncLayout.setVerticalGroup(
            SysEncLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysEnc, "card6");

        javax.swing.GroupLayout SysHosLayout = new javax.swing.GroupLayout(SysHos);
        SysHos.setLayout(SysHosLayout);
        SysHosLayout.setHorizontalGroup(
            SysHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysHosLayout.setVerticalGroup(
            SysHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysHos, "card7");

        javax.swing.GroupLayout SysComLayout = new javax.swing.GroupLayout(SysCom);
        SysCom.setLayout(SysComLayout);
        SysComLayout.setHorizontalGroup(
            SysComLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );
        SysComLayout.setVerticalGroup(
            SysComLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        add(SysCom, "card8");
    }// </editor-fold>//GEN-END:initComponents

    private void ManagePerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManagePerActionPerformed
        // TODO add your handling code here:
        managePersonPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        showPersonTable();
        for(Community c: city.getCommunityList()){
            for(House h: c.getHouseList()){
                houseListDropbox.addItem(String.valueOf(h.getHouseNumber()));
            }
        }
        personCommunityDropbox.removeAllItems();
        for(Community c: city.getCommunityList()){
            personCommunityDropbox.addItem(c.getCommunityName());
        }
    }//GEN-LAST:event_ManagePerActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(communityAdminIDField.getText()) && !parser.checkNull(communityAdminIDField.getText())){
            long communityAdminIDCred = Long.parseLong(communityAdminIDField.getText());
            if(!parser.checkNull(communityAdminPasswordField.getText())){
                String communityAdminPassCred = String.valueOf(communityAdminPasswordField.getText());
                long cAIC = Long.parseLong("123");
                String cAPC = "Comad123";

                if(cAIC == communityAdminIDCred && (cAPC == null ? communityAdminPassCred == null : String.valueOf(cAPC).equals(communityAdminPassCred))){
                    comAdminLogIn = true;
                }
                if(comAdminLogIn){
                    ComLogin.setVisible(false);
                    ComAdmin.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Login to go ahead");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password cannot not be empty");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "PatientID should be int and not empty");
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void ManageComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageComActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ManageComActionPerformed

    public void showPersonTable(){
        DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
        managePersonModel.setRowCount(0);
        DefaultTableModel managePatientPersonModel = (DefaultTableModel) managePatientPersonTable.getModel();
        managePatientPersonModel.setRowCount(0);
        
        for (Person person : personDirectory.getPersonList()) {
            Object[] row = new Object[5];
            row[0] = person;
            row[1] = person.getPersonAge();
            row[2] = person.getPersonDOB();
            row[3] = person.getPersonCellPhoneNumber();
            row[4] = person.getPersonCommunity();
            managePersonModel.addRow(row);
            managePatientPersonModel.addRow(row);
        }
    }
    
    public void showPatientTable(){
        DefaultTableModel managePatientModel = (DefaultTableModel) patientTable.getModel();
        managePatientModel.setRowCount(0);
        
        for (Patient patient : patientDirectory.getPatientList()) {
            Object[] row = new Object[4];
            row[0] = patient.getPerson().getPersonName();
            row[1] = patient.getPatientID();
            row[2] = patient.getPerson().getPersonAge();
            row[3] = patient.getPerson().getPersonCommunity();
            managePatientModel.addRow(row);
        }
    }
    
    public void showCityTable(){
        DefaultTableModel manageCityModel = (DefaultTableModel) cityTable.getModel();
        manageCityModel.setRowCount(0);
        
        for (City city : newSystem.getCityList()) {
            Object[] row = new Object[1];
            row[0] = city.getCityName();
            manageCityModel.addRow(row);
        }
    }
    
    public void showCommunityTable(){
        DefaultTableModel manageCommunityModel = (DefaultTableModel) communityTable.getModel();
        manageCommunityModel.setRowCount(0);
        
        for (City city : newSystem.getCityList()){
            for (Community community: city.getCommunityList()){
                Object[] row = new Object[2];
                row[0] = city.getCityName();
                row[1] = community.getCommunityName();
                manageCommunityModel.addRow(row);
            }
        }
    }
    
    public void populatePatientTable(){
        personADirModel = (DefaultTableModel) patientCreateTable.getModel();
        personADirModel.setRowCount(0);
        personVDirModel = (DefaultTableModel) patientViewTable.getModel();
        personVDirModel.setRowCount(0);
        personVDDirModel = (DefaultTableModel) patientViewDTable.getModel();
        personVDDirModel.setRowCount(0);
        
        for(Patient p: patientDirectory.getPatientList()){
            Object[] row = new Object[4];
            row[0] = p.getPerson().getPersonName();
            row[1] = p.getPatientID();
            row[2] = p.getPerson().getPersonAge();
            row[3] = p.getPerson().getPersonCommunity();
            personADirModel.addRow(row);
            personVDirModel.addRow(row);
            personVDDirModel.addRow(row);
        }
    }
    
    public void showVitalsTable(){
        encounterModel = (DefaultTableModel) encounterChangeTable.getModel();
        encounterModel.setRowCount(0);
        for(Encounter e: selectedPatient.getPatientEncounterHistory()){
            Object[] row = new Object[6];
            row[0] = selectedPatient.getPerson().getPersonName();
            row[1] = selectedPatient.getPatientID();
            row[2] = e.getEncounterID();
            row[3] = e.getVitals().getBloodPressure();
            row[4] = e.getVitals().getHeartRate();
            row[5] = e.getVitals().getWeight();
            encounterModel.addRow(row);
        }
    }
    
    public void populateHospitalTable(){
        hospitalTableModel.setRowCount(0);
        for(Community c: city.getCommunityList()){
            if(selectedCommunity == c.getCommunityName()){
                community = c;
            }
        }
        for(Hospital h: community.getHospitalList()){
            Object[] row = new Object[6];
            row[0] = h.getHospitalNumber();
            row[1] = h.getHospitalStreetName();
            row[2] = h.getHospitalZIPCode();
            row[3] = h.getHospitalCommunity();
            row[4] = h.getHospitalCity();
            row[5] = (h.getDoctorInHospital().size());
            hospitalTableModel.addRow(row);
        }
    }
    
    public void populateManageTable(){
        manageDoctorModel = (DefaultTableModel) manageDoctorTable.getModel();
        managePersonModel = (DefaultTableModel) managePersonTable.getModel();
        manageDoctorModel.setRowCount(0);
        managePersonModel.setRowCount(0);
        long[] doctorCountNumber = new long[doctorDirectory.getDoctorList().size()];
        for(int i=0; i<(doctorDirectory.getDoctorList()).size(); i++){
            doctorCountNumber[i] = doctorDirectory.getDoctorList().get(i).getPerson().getPersonCellPhoneNumber();
        }
        for (Person p : personDirectory.getPersonList()) {
            boolean a = true;
            for(long i : doctorCountNumber){
                if(i == p.getPersonCellPhoneNumber()){
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];
                row[0] = p.getPersonName();
                row[1] = p.getPersonDOB();
                row[2] = p.getPersonCommunity();
                row[3] = p.getPersonCellPhoneNumber();
                managePersonModel.addRow(row);
                a = true;
            }
        }
        for(Doctor d: doctorDirectory.getDoctorList()){
            Object[] row = new Object[5];
            row[0] = d.getDoctorID();
            row[1] = d.getPerson().getPersonName();
            row[2] = d.getPerson().getPersonAge();
            row[3] = d.getPerson().getPersonCommunity();
            row[4] = d.getPerson().getPersonCellPhoneNumber();
            manageDoctorModel.addRow(row);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ManageCom;
    private javax.swing.JButton ManageDoc;
    private javax.swing.JButton ManageEnc;
    private javax.swing.JButton ManageHos;
    private javax.swing.JButton ManagePat;
    private javax.swing.JButton ManagePer;
    private javax.swing.JTextField SysAdminIDField;
    private javax.swing.JTextField SysAdminPassField;
    private javax.swing.JPanel SysCom;
    private javax.swing.JPanel SysDoc;
    private javax.swing.JPanel SysEnc;
    private javax.swing.JPanel SysHos;
    private javax.swing.JPanel SysLogin;
    private javax.swing.JPanel SysMenu;
    private javax.swing.JPanel SysPat;
    private javax.swing.JPanel SysPer;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel sysAdminIDText;
    private javax.swing.JLabel sysAdminPassText;
    // End of variables declaration//GEN-END:variables
}
