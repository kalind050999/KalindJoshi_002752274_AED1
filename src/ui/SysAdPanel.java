/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui;

import Parser.Parser;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Com;
import model.Doc;
import model.DocDir;
import model.Encounter;
import model.EncounterHis;
import model.Hosp;
import model.HospDir;
import model.House;
import model.HeadClass;
import model.Pat;
import model.PatDir;
import model.Person;
import model.PersonDir;
import model.VitalSigns;

/**
 *
 * @author meetdoshi
 */

public class SysAdPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemJPanel
     */
    
    City city, cd;
    String[] communityList;
    PatDir patientDirectory;
    HospDir hospitalDirectory;
    PersonDir personDirectory;
    DocDir doctorDirectory;
    HeadClass newSystem;
    Parser parser = new Parser();
    boolean systemAdminLoggedIn;
    ArrayList<Pat> patientList, patList;
    ArrayList<Encounter> encounterList;
    ArrayList<Integer> hospNumbers;
    DefaultTableModel personADirModel, personVDirModel, personVDDirModel, hospitalTableModel, manageDoctorTableModel;
    DefaultTableModel encounterModel, encounterChangeModel, manageDoctorModel, managePersonModel;
    Pat patient, patientAdd, patientView, selectedPatient;
    float bloodPressure, heartRate, weight;
    City cityView, getCity;
    EncounterHis encounterHistory;
    VitalSigns selectedPatVitalSigns;
    String selectedCommunity;
    Com community, communityDelHospital, communityView, cmd;
    Hosp hospital, selectedHospital, hospitalDuplicate, delHosp;
    Person selectedPerson;
    Doc doctor, dltDoctor;
    Encounter encounter, selectedEncounter;
    
    public SysAdPanel() {
        initComponents();
    }
    
    public SysAdPanel(City city, String[] communityList, PatDir patientDirectory, HospDir hospitalDirectory, PersonDir personDirectory, DocDir doctorDirectory, HeadClass newSystem) {
        initComponents();
        this.city = city;
        this.communityList = communityList;
        this.patientDirectory = patientDirectory;
        this.hospitalDirectory = hospitalDirectory;
        this.personDirectory = personDirectory;
        this.doctorDirectory = doctorDirectory;
        this.newSystem = newSystem;
        
        systemAdminPanel.setVisible(true);
        
        patientList = patientDirectory.getPatList();
        hospitalTableModel = (DefaultTableModel) hospitalTable.getModel();
        houseListDropbox.removeAllItems();
        communityDropbox.removeAllItems();
        for(Com c: city.getComList()){
            communityDropbox.addItem(c.getComName());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        systemAdminLoginPanel = new javax.swing.JPanel();
        systemAdminIDText = new javax.swing.JLabel();
        systemAdminIDField = new javax.swing.JTextField();
        systemAdminPasswordText = new javax.swing.JLabel();
        systemAdminPasswordField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        systemAdminPanel = new javax.swing.JPanel();
        managePerson = new javax.swing.JButton();
        managePatient = new javax.swing.JButton();
        manageDoctor = new javax.swing.JButton();
        manageHospital = new javax.swing.JButton();
        manageCity = new javax.swing.JButton();
        manageEncounter = new javax.swing.JButton();
        managePersonPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        personNameText = new javax.swing.JLabel();
        personNameInput = new javax.swing.JTextField();
        personAgeText = new javax.swing.JLabel();
        personAgeInput = new javax.swing.JTextField();
        personDOBInput = new javax.swing.JTextField();
        personDOBText = new javax.swing.JLabel();
        personContactInput = new javax.swing.JTextField();
        personContactText = new javax.swing.JLabel();
        personCommunityText = new javax.swing.JLabel();
        personCommunityDropbox = new javax.swing.JComboBox<>();
        createPersonButton = new javax.swing.JButton();
        viewPersonButton = new javax.swing.JButton();
        updatePersonButton = new javax.swing.JButton();
        deletePersonButton = new javax.swing.JButton();
        addPersonHouseButton = new javax.swing.JButton();
        houseListDropbox = new javax.swing.JComboBox<>();
        backPerson = new javax.swing.JButton();
        managePatientPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        managePatientPersonTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        createPatientButton = new javax.swing.JButton();
        viewPatientButton = new javax.swing.JButton();
        updatePatientButton = new javax.swing.JButton();
        deletePatientButton = new javax.swing.JButton();
        backPatient = new javax.swing.JButton();
        patientIDText = new javax.swing.JLabel();
        patientIDInput = new javax.swing.JTextField();
        patientNameText = new javax.swing.JLabel();
        patientNameInput = new javax.swing.JTextField();
        patientAgeText = new javax.swing.JLabel();
        patientAgeInput = new javax.swing.JTextField();
        manageDoctorPanel = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        manageDoctorTable = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        managePersonTable = new javax.swing.JTable();
        assignDoctor = new javax.swing.JButton();
        hospitalNumbers = new javax.swing.JComboBox<>();
        deleteDoctor = new javax.swing.JButton();
        backDoctor = new javax.swing.JButton();
        manageCityCommunityPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cityTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        cityText = new javax.swing.JLabel();
        cityInput = new javax.swing.JTextField();
        communityText = new javax.swing.JLabel();
        communityInput = new javax.swing.JTextField();
        addCityButton = new javax.swing.JButton();
        viewCityButton = new javax.swing.JButton();
        updateCityButton = new javax.swing.JButton();
        deleteCityButton = new javax.swing.JButton();
        addCommunityButton = new javax.swing.JButton();
        viewCommunityButton = new javax.swing.JButton();
        updateCommunityButton = new javax.swing.JButton();
        deleteCommunityButton = new javax.swing.JButton();
        manageHospitalPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        communityDropbox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        hospitalTable = new javax.swing.JTable();
        hospitalUpdateFilterBox = new javax.swing.JComboBox<>();
        hospitalUpdateFieldText = new javax.swing.JTextField();
        updateHospital = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        hospitalNumberInput = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        hospitalStreetNameInput = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        hospitalCommunityInput = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        hospitalCityInput = new javax.swing.JTextField();
        createHospital = new javax.swing.JButton();
        deleteHospitalButton = new javax.swing.JButton();
        backHospital = new javax.swing.JButton();
        manageEncounterPanel = new javax.swing.JPanel();
        doctorPanel = new javax.swing.JPanel();
        doctorTabPane = new javax.swing.JTabbedPane();
        newEncounter = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        patientCreateTable = new javax.swing.JTable();
        bloodPressureText = new javax.swing.JLabel();
        BPInput = new javax.swing.JTextField();
        heartRateText = new javax.swing.JLabel();
        HRInput = new javax.swing.JTextField();
        weightText = new javax.swing.JLabel();
        weightInput = new javax.swing.JTextField();
        symptomsText = new javax.swing.JLabel();
        symptomsInput = new javax.swing.JTextField();
        addVitalsButton = new javax.swing.JButton();
        backEncounter = new javax.swing.JButton();
        previousEncounter = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        patientViewTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        encounterTable = new javax.swing.JTable();
        viewEncounterButton = new javax.swing.JButton();
        deleteEncounter = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        patientViewDTable = new javax.swing.JTable();
        viewDeleteEncounterButton = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        encounterChangeTable = new javax.swing.JTable();
        encounterUpdateFilterBox = new javax.swing.JComboBox<>();
        encounterUpdateFieldText = new javax.swing.JTextField();
        updateEncounter = new javax.swing.JButton();
        deleteEncounterButton = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        systemAdminLoginPanel.setBackground(new java.awt.Color(204, 204, 255));

        systemAdminIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        systemAdminIDText.setText("Sys ID:");

        systemAdminPasswordText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        systemAdminPasswordText.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout systemAdminLoginPanelLayout = new javax.swing.GroupLayout(systemAdminLoginPanel);
        systemAdminLoginPanel.setLayout(systemAdminLoginPanelLayout);
        systemAdminLoginPanelLayout.setHorizontalGroup(
            systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, systemAdminLoginPanelLayout.createSequentialGroup()
                .addContainerGap(387, Short.MAX_VALUE)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
            .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(systemAdminLoginPanelLayout.createSequentialGroup()
                    .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(systemAdminLoginPanelLayout.createSequentialGroup()
                            .addGap(73, 73, 73)
                            .addComponent(systemAdminPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(systemAdminLoginPanelLayout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addComponent(systemAdminIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                    .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(systemAdminIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(systemAdminPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(73, 73, 73)))
        );
        systemAdminLoginPanelLayout.setVerticalGroup(
            systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminLoginPanelLayout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addComponent(loginButton)
                .addContainerGap(294, Short.MAX_VALUE))
            .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(systemAdminLoginPanelLayout.createSequentialGroup()
                    .addGap(206, 206, 206)
                    .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(systemAdminIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(systemAdminIDText))
                    .addGap(18, 18, 18)
                    .addGroup(systemAdminLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(systemAdminPasswordText)
                        .addComponent(systemAdminPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(330, Short.MAX_VALUE)))
        );

        add(systemAdminLoginPanel, "card4");

        systemAdminPanel.setBackground(new java.awt.Color(204, 204, 255));
        systemAdminPanel.setMinimumSize(new java.awt.Dimension(600, 600));

        managePerson.setBackground(new java.awt.Color(255, 204, 204));
        managePerson.setText("Manage Person");
        managePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePersonActionPerformed(evt);
            }
        });

        managePatient.setBackground(new java.awt.Color(255, 204, 204));
        managePatient.setText("Manage Patient");
        managePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePatientActionPerformed(evt);
            }
        });

        manageDoctor.setBackground(new java.awt.Color(255, 204, 204));
        manageDoctor.setText("Manage Doctor");
        manageDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageDoctorActionPerformed(evt);
            }
        });

        manageHospital.setBackground(new java.awt.Color(255, 204, 204));
        manageHospital.setText("Manage Hospital");
        manageHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageHospitalActionPerformed(evt);
            }
        });

        manageCity.setBackground(new java.awt.Color(255, 204, 204));
        manageCity.setText("Manage City");
        manageCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCityActionPerformed(evt);
            }
        });

        manageEncounter.setBackground(new java.awt.Color(255, 204, 204));
        manageEncounter.setText("Manage Encounter");
        manageEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout systemAdminPanelLayout = new javax.swing.GroupLayout(systemAdminPanel);
        systemAdminPanel.setLayout(systemAdminPanelLayout);
        systemAdminPanelLayout.setHorizontalGroup(
            systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addGroup(systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageCity, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        systemAdminPanelLayout.setVerticalGroup(
            systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(systemAdminPanelLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(systemAdminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(systemAdminPanelLayout.createSequentialGroup()
                        .addComponent(manageHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(manageCity, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(manageEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(systemAdminPanelLayout.createSequentialGroup()
                        .addComponent(managePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(managePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(manageDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        add(systemAdminPanel, "card6");

        managePersonPanel.setBackground(new java.awt.Color(204, 204, 255));

        personTable.setBackground(new java.awt.Color(255, 204, 204));
        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PersonName", "Age", "DOB", "Contact", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(personTable);
        if (personTable.getColumnModel().getColumnCount() > 0) {
            personTable.getColumnModel().getColumn(3).setHeaderValue("Contact");
        }

        personNameText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personNameText.setText("Person Name:");

        personAgeText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personAgeText.setText("Age:");

        personDOBText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personDOBText.setText("DOB:");

        personContactText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personContactText.setText("Contact Info:");

        personCommunityText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        personCommunityText.setText("Community:");

        personCommunityDropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        createPersonButton.setBackground(new java.awt.Color(153, 255, 153));
        createPersonButton.setText("Create");
        createPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPersonButtonActionPerformed(evt);
            }
        });

        viewPersonButton.setText("View");
        viewPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPersonButtonActionPerformed(evt);
            }
        });

        updatePersonButton.setText("Update");
        updatePersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePersonButtonActionPerformed(evt);
            }
        });

        deletePersonButton.setBackground(new java.awt.Color(255, 51, 51));
        deletePersonButton.setText("Delete");
        deletePersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonButtonActionPerformed(evt);
            }
        });

        addPersonHouseButton.setText("Add Person to House");
        addPersonHouseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonHouseButtonActionPerformed(evt);
            }
        });

        houseListDropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        backPerson.setText("Back");
        backPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backPersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managePersonPanelLayout = new javax.swing.GroupLayout(managePersonPanel);
        managePersonPanel.setLayout(managePersonPanelLayout);
        managePersonPanelLayout.setHorizontalGroup(
            managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managePersonPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(managePersonPanelLayout.createSequentialGroup()
                        .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addComponent(personNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(personNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addComponent(personAgeText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(personAgeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addComponent(personDOBText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(personDOBInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addComponent(personContactText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(personContactInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(personCommunityText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(createPersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(managePersonPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(personCommunityDropbox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(managePersonPanelLayout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(viewPersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(18, 18, 18)
                        .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addComponent(updatePersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(deletePersonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePersonPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(houseListDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addPersonHouseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 34, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managePersonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        managePersonPanelLayout.setVerticalGroup(
            managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePersonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personNameText)
                    .addComponent(personNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personAgeText)
                    .addComponent(personAgeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personDOBText)
                    .addComponent(personDOBInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(houseListDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPersonHouseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personContactText)
                    .addComponent(personContactInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(personCommunityText)
                    .addComponent(personCommunityDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(managePersonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createPersonButton)
                    .addComponent(viewPersonButton)
                    .addComponent(updatePersonButton)
                    .addComponent(deletePersonButton))
                .addGap(41, 41, 41)
                .addComponent(backPerson)
                .addContainerGap())
        );

        add(managePersonPanel, "card2");

        managePatientPanel.setBackground(new java.awt.Color(204, 204, 255));

        managePatientPersonTable.setBackground(new java.awt.Color(255, 204, 204));
        managePatientPersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PersonName", "Age", "DOB", "Contact", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(managePatientPersonTable);
        if (managePatientPersonTable.getColumnModel().getColumnCount() > 0) {
            managePatientPersonTable.getColumnModel().getColumn(3).setHeaderValue("Contact");
        }

        patientTable.setBackground(new java.awt.Color(255, 204, 204));
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PatientName", "ID", "Age", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(patientTable);

        createPatientButton.setBackground(new java.awt.Color(102, 255, 102));
        createPatientButton.setText("Create");
        createPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPatientButtonActionPerformed(evt);
            }
        });

        viewPatientButton.setText("View");
        viewPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientButtonActionPerformed(evt);
            }
        });

        updatePatientButton.setText("Update");
        updatePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientButtonActionPerformed(evt);
            }
        });

        deletePatientButton.setBackground(new java.awt.Color(255, 51, 51));
        deletePatientButton.setText("Delete");
        deletePatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientButtonActionPerformed(evt);
            }
        });

        backPatient.setText("Back");
        backPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backPatientActionPerformed(evt);
            }
        });

        patientIDText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        patientIDText.setText("Patient ID:");

        patientIDInput.setEditable(false);

        patientNameText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        patientNameText.setText("Patient Name:");

        patientAgeText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        patientAgeText.setText("Patient Age:");

        javax.swing.GroupLayout managePatientPanelLayout = new javax.swing.GroupLayout(managePatientPanel);
        managePatientPanel.setLayout(managePatientPanelLayout);
        managePatientPanelLayout.setHorizontalGroup(
            managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managePatientPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managePatientPanelLayout.createSequentialGroup()
                                .addComponent(createPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(viewPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updatePatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deletePatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
                            .addComponent(backPatient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(managePatientPanelLayout.createSequentialGroup()
                        .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(managePatientPanelLayout.createSequentialGroup()
                                .addComponent(patientIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePatientPanelLayout.createSequentialGroup()
                                .addComponent(patientAgeText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientAgeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(managePatientPanelLayout.createSequentialGroup()
                                .addComponent(patientNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patientNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 296, Short.MAX_VALUE)))
                .addContainerGap())
        );
        managePatientPanelLayout.setVerticalGroup(
            managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePatientPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIDText)
                    .addComponent(patientIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameText)
                    .addComponent(patientNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientAgeText)
                    .addComponent(patientAgeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(managePatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createPatientButton)
                    .addComponent(viewPatientButton)
                    .addComponent(updatePatientButton)
                    .addComponent(deletePatientButton))
                .addGap(20, 20, 20)
                .addComponent(backPatient)
                .addContainerGap())
        );

        add(managePatientPanel, "card3");

        manageDoctorTable.setBackground(new java.awt.Color(255, 204, 204));
        manageDoctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "Name", "Age", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(manageDoctorTable);

        managePersonTable.setBackground(new java.awt.Color(255, 204, 204));
        managePersonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "BirthDate", "Community", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(managePersonTable);

        assignDoctor.setText("Assign Doctor");
        assignDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignDoctorActionPerformed(evt);
            }
        });

        hospitalNumbers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        deleteDoctor.setBackground(new java.awt.Color(255, 102, 102));
        deleteDoctor.setText("Delete");
        deleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorActionPerformed(evt);
            }
        });

        backDoctor.setText("Back");
        backDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDoctorPanelLayout = new javax.swing.GroupLayout(manageDoctorPanel);
        manageDoctorPanel.setLayout(manageDoctorPanelLayout);
        manageDoctorPanelLayout.setHorizontalGroup(
            manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorPanelLayout.createSequentialGroup()
                        .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                                .addComponent(assignDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hospitalNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageDoctorPanelLayout.createSequentialGroup()
                        .addComponent(backDoctor)
                        .addContainerGap())))
        );
        manageDoctorPanelLayout.setVerticalGroup(
            manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDoctorPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageDoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignDoctor)
                    .addComponent(hospitalNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteDoctor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(backDoctor)
                .addContainerGap())
        );

        add(manageDoctorPanel, "card4");

        cityTable.setBackground(new java.awt.Color(255, 204, 204));
        cityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(cityTable);

        communityTable.setBackground(new java.awt.Color(255, 204, 204));
        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "City", "Community"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(communityTable);

        cityText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cityText.setText("City:");

        cityInput.setMinimumSize(new java.awt.Dimension(70, 23));
        cityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityInputActionPerformed(evt);
            }
        });

        communityText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        communityText.setText("Community:");

        communityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityInputActionPerformed(evt);
            }
        });

        addCityButton.setBackground(new java.awt.Color(102, 255, 102));
        addCityButton.setText("Add City");
        addCityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCityButtonActionPerformed(evt);
            }
        });

        viewCityButton.setText("View");
        viewCityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCityButtonActionPerformed(evt);
            }
        });

        updateCityButton.setText("Update");
        updateCityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCityButtonActionPerformed(evt);
            }
        });

        deleteCityButton.setBackground(new java.awt.Color(255, 51, 51));
        deleteCityButton.setText("Delete");
        deleteCityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCityButtonActionPerformed(evt);
            }
        });

        addCommunityButton.setBackground(new java.awt.Color(102, 255, 102));
        addCommunityButton.setText("Add Community");
        addCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommunityButtonActionPerformed(evt);
            }
        });

        viewCommunityButton.setText("View");
        viewCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCommunityButtonActionPerformed(evt);
            }
        });

        updateCommunityButton.setText("Update");
        updateCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCommunityButtonActionPerformed(evt);
            }
        });

        deleteCommunityButton.setBackground(new java.awt.Color(255, 51, 51));
        deleteCommunityButton.setText("Delete");
        deleteCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCommunityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageCityCommunityPanelLayout = new javax.swing.GroupLayout(manageCityCommunityPanel);
        manageCityCommunityPanel.setLayout(manageCityCommunityPanelLayout);
        manageCityCommunityPanelLayout.setHorizontalGroup(
            manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                        .addComponent(cityText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                        .addComponent(communityText, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(communityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
            .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteCityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewCityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteCommunityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCommunityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewCommunityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCommunityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
        manageCityCommunityPanelLayout.setVerticalGroup(
            manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cityText)
                        .addComponent(cityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(communityText)
                        .addComponent(communityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70)
                .addGroup(manageCityCommunityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                        .addComponent(addCityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewCityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateCityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteCityButton))
                    .addGroup(manageCityCommunityPanelLayout.createSequentialGroup()
                        .addComponent(addCommunityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewCommunityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateCommunityButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteCommunityButton)))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        add(manageCityCommunityPanel, "card5");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Communities:");

        communityDropbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        hospitalTable.setBackground(new java.awt.Color(255, 204, 204));
        hospitalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "HospitalNumber", "StreetName", "ZIPCode", "Community", "City", "Doctors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(hospitalTable);

        hospitalUpdateFilterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "streetName", "ZIPCode" }));

        updateHospital.setText("Update Details");
        updateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHospitalActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Hospital Number:");

        hospitalNumberInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalNumberInputActionPerformed(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Street Name:");

        hospitalStreetNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalStreetNameInputActionPerformed(evt);
            }
        });

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Community:");

        hospitalCommunityInput.setEditable(false);
        hospitalCommunityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalCommunityInputActionPerformed(evt);
            }
        });

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("City:");

        hospitalCityInput.setEditable(false);
        hospitalCityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalCityInputActionPerformed(evt);
            }
        });

        createHospital.setBackground(new java.awt.Color(102, 255, 102));
        createHospital.setText("Create");
        createHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHospitalActionPerformed(evt);
            }
        });

        deleteHospitalButton.setBackground(new java.awt.Color(255, 51, 51));
        deleteHospitalButton.setText("Delete");
        deleteHospitalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHospitalButtonActionPerformed(evt);
            }
        });

        backHospital.setText("Back");
        backHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backHospitalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageHospitalPanelLayout = new javax.swing.GroupLayout(manageHospitalPanel);
        manageHospitalPanel.setLayout(manageHospitalPanelLayout);
        manageHospitalPanelLayout.setHorizontalGroup(
            manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                        .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hospitalNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hospitalStreetNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hospitalCommunityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hospitalCityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                        .addComponent(hospitalUpdateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hospitalUpdateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                        .addComponent(createHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)
                        .addComponent(deleteHospitalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageHospitalPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageHospitalPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(communityDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(backHospital, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        manageHospitalPanelLayout.setVerticalGroup(
            manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageHospitalPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityDropbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hospitalUpdateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hospitalUpdateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateHospital))
                .addGap(18, 18, 18)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(hospitalNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(hospitalStreetNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(hospitalCommunityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(hospitalCityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(manageHospitalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createHospital)
                    .addComponent(deleteHospitalButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(backHospital)
                .addContainerGap())
        );

        add(manageHospitalPanel, "card7");

        manageEncounterPanel.setBackground(new java.awt.Color(255, 204, 0));

        doctorPanel.setBackground(new java.awt.Color(255, 204, 0));
        doctorPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        doctorTabPane.setBackground(new java.awt.Color(204, 204, 255));

        newEncounter.setBackground(new java.awt.Color(255, 204, 0));

        patientCreateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "PatientAge", "PatientCommunity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(patientCreateTable);

        bloodPressureText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        bloodPressureText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        bloodPressureText.setText("Blood Pressure:");

        heartRateText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        heartRateText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        heartRateText.setText("Heart Rate:");

        weightText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        weightText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        weightText.setText("Weight:");

        symptomsText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        symptomsText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        symptomsText.setText("Symptoms:");

        addVitalsButton.setText("Add New Vitals");
        addVitalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVitalsButtonActionPerformed(evt);
            }
        });

        backEncounter.setText("Back");
        backEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newEncounterLayout = new javax.swing.GroupLayout(newEncounter);
        newEncounter.setLayout(newEncounterLayout);
        newEncounterLayout.setHorizontalGroup(
            newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEncounterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(heartRateText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(HRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(bloodPressureText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(BPInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEncounterLayout.createSequentialGroup()
                            .addComponent(weightText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(weightInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(newEncounterLayout.createSequentialGroup()
                            .addComponent(symptomsText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(symptomsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(newEncounterLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(addVitalsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newEncounterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backEncounter)
                .addContainerGap())
        );
        newEncounterLayout.setVerticalGroup(
            newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEncounterLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BPInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodPressureText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(HRInput)
                    .addComponent(heartRateText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weightInput)
                    .addComponent(weightText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(symptomsText, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(symptomsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(addVitalsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(backEncounter)
                .addContainerGap())
        );

        doctorTabPane.addTab("New Encounter", newEncounter);

        previousEncounter.setBackground(new java.awt.Color(255, 204, 0));

        patientViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "PatientAge", "PatientCommunity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(patientViewTable);

        encounterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "EncounterID", "BloodPressure", "HeartRate", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(encounterTable);

        viewEncounterButton.setText("View Previous Encounters");
        viewEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncounterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout previousEncounterLayout = new javax.swing.GroupLayout(previousEncounter);
        previousEncounter.setLayout(previousEncounterLayout);
        previousEncounterLayout.setHorizontalGroup(
            previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousEncounterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, previousEncounterLayout.createSequentialGroup()
                .addContainerGap(201, Short.MAX_VALUE)
                .addComponent(viewEncounterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(199, 199, 199))
        );
        previousEncounterLayout.setVerticalGroup(
            previousEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previousEncounterLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(viewEncounterButton)
                .addGap(88, 88, 88)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        doctorTabPane.addTab("Previous Encounters", previousEncounter);

        deleteEncounter.setBackground(new java.awt.Color(204, 204, 255));

        patientViewDTable.setBackground(new java.awt.Color(255, 204, 204));
        patientViewDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "PatientAge", "PatientCommunity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(patientViewDTable);

        viewDeleteEncounterButton.setText("View Previous Encounters");
        viewDeleteEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDeleteEncounterButtonActionPerformed(evt);
            }
        });

        encounterChangeTable.setBackground(new java.awt.Color(255, 204, 204));
        encounterChangeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "EncounterID", "BloodPressure", "HeartRate", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(encounterChangeTable);

        encounterUpdateFilterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bloodPressure", "heartRate", "weight" }));

        updateEncounter.setBackground(new java.awt.Color(102, 255, 102));
        updateEncounter.setText("Update Details");
        updateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEncounterActionPerformed(evt);
            }
        });

        deleteEncounterButton.setBackground(new java.awt.Color(255, 102, 102));
        deleteEncounterButton.setText("Delete Encounter");
        deleteEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEncounterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteEncounterLayout = new javax.swing.GroupLayout(deleteEncounter);
        deleteEncounter.setLayout(deleteEncounterLayout);
        deleteEncounterLayout.setHorizontalGroup(
            deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteEncounterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(deleteEncounterLayout.createSequentialGroup()
                        .addComponent(deleteEncounterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(encounterUpdateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(encounterUpdateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteEncounterLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(viewDeleteEncounterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(159, 159, 159)))
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        deleteEncounterLayout.setVerticalGroup(
            deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteEncounterLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(viewDeleteEncounterButton)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(deleteEncounterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encounterUpdateFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encounterUpdateFieldText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateEncounter)
                    .addComponent(deleteEncounterButton))
                .addContainerGap(107, Short.MAX_VALUE))
        );

        doctorTabPane.addTab("Update/Delete Encounters", deleteEncounter);

        javax.swing.GroupLayout doctorPanelLayout = new javax.swing.GroupLayout(doctorPanel);
        doctorPanel.setLayout(doctorPanelLayout);
        doctorPanelLayout.setHorizontalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doctorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(doctorTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        doctorPanelLayout.setVerticalGroup(
            doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(doctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(doctorPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(doctorTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout manageEncounterPanelLayout = new javax.swing.GroupLayout(manageEncounterPanel);
        manageEncounterPanel.setLayout(manageEncounterPanelLayout);
        manageEncounterPanelLayout.setHorizontalGroup(
            manageEncounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(doctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        manageEncounterPanelLayout.setVerticalGroup(
            manageEncounterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEncounterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(doctorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(manageEncounterPanel, "card8");
    }// </editor-fold>//GEN-END:initComponents

    private void managePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePersonActionPerformed
        // TODO add your handling code here:
        managePersonPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        showPersonTable();
        for(Com c: city.getComList()){
            for(House h: c.getHouseList()){
                houseListDropbox.addItem(String.valueOf(h.getHouseNum()));
            }
        }
        personCommunityDropbox.removeAllItems();
        for(Com c: city.getComList()){
            personCommunityDropbox.addItem(c.getComName());
        }
        
    }//GEN-LAST:event_managePersonActionPerformed

    private void managePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePatientActionPerformed
        // TODO add your handling code here:
        managePatientPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        showPatientTable();
        showPersonTable();
    }//GEN-LAST:event_managePatientActionPerformed

    private void manageDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageDoctorActionPerformed
        // TODO add your handling code here:
        manageDoctorPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        populateManageTable();
        hospNumbers = new ArrayList<Integer>();
        for(Com c: city.getComList()){
            for(Hosp h: c.getHospitalList()){
                hospNumbers.add(h.getHospNum());
            }
        }
        hospitalNumbers.removeAllItems();
        for(int s: hospNumbers){
            hospitalNumbers.addItem(String.valueOf(s));
        }
    }//GEN-LAST:event_manageDoctorActionPerformed

    private void manageHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageHospitalActionPerformed
        // TODO add your handling code here:
        manageHospitalPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        populateHospitalTable();
    }//GEN-LAST:event_manageHospitalActionPerformed

    private void manageCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCityActionPerformed
        // TODO add your handling code here:
        manageCityCommunityPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        showCityTable();
        showCommunityTable();
    }//GEN-LAST:event_manageCityActionPerformed

    private void manageEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEncounterActionPerformed
        // TODO add your handling code here:
        manageEncounterPanel.setVisible(true);
        systemAdminPanel.setVisible(false);
        populatePatientTable();
    }//GEN-LAST:event_manageEncounterActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        if(parser.isLong(systemAdminIDField.getText()) && !parser.checkNull(systemAdminIDField.getText())){
            long systemAdminIDCred = Long.parseLong(systemAdminIDField.getText());
            if(!parser.checkNull(systemAdminPasswordField.getText())){
                String systemAdminPassCred = String.valueOf(systemAdminPasswordField.getText());
                long sAIC = Long.parseLong("123");
                String sAPC = "12345";
                
                if(sAIC == systemAdminIDCred && (sAPC == null ? systemAdminPassCred == null : String.valueOf(sAPC).equals(systemAdminPassCred))){
                    systemAdminLoggedIn = true;
                }
                if(systemAdminLoggedIn){
                    systemAdminLoginPanel.setVisible(false);
                    systemAdminPanel.setVisible(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "Login to view operations");
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "Password cannot be empty");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "PatientID should be integer and not empty");
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void createPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPersonButtonActionPerformed
        // TODO add your handling code here:
        Person newPerson = new Person();
        Parser parser = new Parser();
        newPerson.setName(personNameInput.getText());
        newPerson.setAge(Integer.parseInt(personAgeInput.getText()));
        LocalDate date = parser.convertToDate(personDOBInput.getText());
        newPerson.setDob(date);
        newPerson.setMob(Long.parseLong(personContactInput.getText()));
        newPerson.setCom(personCommunityDropbox.getSelectedItem()+"");
        personDirectory.addPersonToDirectory(newPerson);
        showPersonTable();
        
        personNameInput.setText("");
        personAgeInput.setText("");
        personDOBInput.setText("");
        personContactInput.setText("");
    }//GEN-LAST:event_createPersonButtonActionPerformed

    private void viewPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPersonButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to view person info");
        }
        else{
            DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
            Person personOBJ = (Person) managePersonModel.getValueAt(selectedRowIndex, 0);
            personNameInput.setText(String.valueOf(personOBJ.getName()));
            personAgeInput.setText(String.valueOf(personOBJ.getAge()));
            personDOBInput.setText(String.valueOf(personOBJ.getDob()));
            personContactInput.setText(String.valueOf(personOBJ.getMob()));
            personCommunityDropbox.setSelectedItem(personOBJ.getCom());
        }
    }//GEN-LAST:event_viewPersonButtonActionPerformed

    private void updatePersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePersonButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to update info");
        }
        else{
            Parser parser = new Parser();
            DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
            Person personOBJ = (Person) managePersonModel.getValueAt(selectedRowIndex, 0);
            personOBJ.setName(personNameInput.getText());
            personOBJ.setAge(Integer.parseInt(personAgeInput.getText()));
            LocalDate date = parser.convertToDate(personDOBInput.getText());
            personOBJ.setDob(date);
            personOBJ.setMob(Long.parseLong(personContactInput.getText()));
            personOBJ.setCom(personCommunityDropbox.getSelectedItem()+"");
            showPersonTable();
        }
    }//GEN-LAST:event_updatePersonButtonActionPerformed

    private void deletePersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to delete person info");
        }
        else{
            DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
            Person personOBJ = (Person) managePersonModel.getValueAt(selectedRowIndex, 0);
            personDirectory.getPersonList().remove(personOBJ);
            showPersonTable();
        }
    }//GEN-LAST:event_deletePersonButtonActionPerformed

    private void addPersonHouseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonHouseButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = personTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to delete info");
        }
        else{
            DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
            Person personOBJ = (Person) managePersonModel.getValueAt(selectedRowIndex, 0);
            for(City cL: newSystem.getCityList()){
                for(Com cmL: cL.getComList()){
                    for(House hL: cmL.getHouseList()){
                        if((hL.getHouseNum()) == Integer.parseInt(houseListDropbox.getSelectedItem()+"")){
                            hL.addPersonToHouse(personOBJ);
                            JOptionPane.showMessageDialog(this, "Person added to house");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_addPersonHouseButtonActionPerformed

    private void backPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backPersonActionPerformed
        // TODO add your handling code here:
        systemAdminPanel.setVisible(true);
        managePersonPanel.setVisible(false);
    }//GEN-LAST:event_backPersonActionPerformed

    private void createPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = managePatientPersonTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
        }
        else{
            DefaultTableModel managePatientPersonModel = (DefaultTableModel) managePatientPersonTable.getModel();
            Person personOBJ = (Person) managePatientPersonModel.getValueAt(selectedRowIndex, 0);
            patientDirectory.createPat(personOBJ);
            showPatientTable();
        }
    }//GEN-LAST:event_createPatientButtonActionPerformed

    private void viewPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row");
        }
        else{
            DefaultTableModel managePatientModel = (DefaultTableModel) patientTable.getModel();
            String patID = String.valueOf(managePatientModel.getValueAt(selectedRowIndex, 1));
            for(Pat p: patientDirectory.getPatList()){
                if (p.getPid() == Long.parseLong(patID)){
                    patientIDInput.setText(String.valueOf(p.getPid()));
                    patientNameInput.setText(p.getPerson().getName());
                    patientAgeInput.setText(String.valueOf(p.getPerson().getAge()));
                }
            }
        }
    }//GEN-LAST:event_viewPatientButtonActionPerformed

    private void updatePatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row");
        }
        else{
            DefaultTableModel managePatientModel = (DefaultTableModel) patientTable.getModel();
            String patID = String.valueOf(managePatientModel.getValueAt(selectedRowIndex, 1));
            for(Pat p: patientDirectory.getPatList()){
                if (p.getPid()== Long.parseLong(patID)){
                    p.getPerson().setName(patientNameInput.getText());
                    p.getPerson().setAge(Integer.parseInt(patientAgeInput.getText()));
                    showPatientTable();
                }
            }
        }
    }//GEN-LAST:event_updatePatientButtonActionPerformed

    private void deletePatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = patientTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row");
        }
        else{
            DefaultTableModel managePatientModel = (DefaultTableModel) patientTable.getModel();
            String patID = String.valueOf(managePatientModel.getValueAt(selectedRowIndex, 1));
            for(Pat p: patientDirectory.getPatList()){
                if (p.getPid()== Long.parseLong(patID)){
                    patient = p;
                }
            }
            patientDirectory.getPatList().remove(patient);
            JOptionPane.showMessageDialog(this, "Patient removed");
            showPatientTable();
        }
    }//GEN-LAST:event_deletePatientButtonActionPerformed

    private void backPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backPatientActionPerformed
        // TODO add your handling code here:
        systemAdminPanel.setVisible(true);
        managePatientPanel.setVisible(false);
    }//GEN-LAST:event_backPatientActionPerformed

    private void cityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityInputActionPerformed

    private void communityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_communityInputActionPerformed

    private void addCityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCityButtonActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        for(City c: newSystem.getCityList()) {
            if(c.getCityName() == cityInput.getText()){
                flag=false;
            }
        }
        if(!flag){
            JOptionPane.showMessageDialog(this, "City already exists");
        }
        else{
            newSystem.addCity(String.valueOf(cityInput.getText()));
            showCityTable();
        }
    }//GEN-LAST:event_addCityButtonActionPerformed

    private void viewCityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select city to view");
        }
        else{
            DefaultTableModel cityTableModel = (DefaultTableModel) cityTable.getModel();
            String cityOBJ = String.valueOf(cityTableModel.getValueAt(selectedRowIndex, 0)) ;
            for(City c: newSystem.getCityList()){
                if(c.getCityName() == cityOBJ){
                    cityView = c;
                }
            }
            cityInput.setText(cityView.getCityName());
        }
    }//GEN-LAST:event_viewCityButtonActionPerformed

    private void updateCityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to update");
        }
        else{
            DefaultTableModel cityTableModel = (DefaultTableModel) cityTable.getModel();
            String cityOBJ = String.valueOf(cityTableModel.getValueAt(selectedRowIndex, 0)) ;
            for(City c: newSystem.getCityList()){
                if(c.getCityName() == cityOBJ){
                    cityView = c;
                }
            }
            cityView.setCityName(String.valueOf(cityInput.getText()));
            showCityTable();
        }
    }//GEN-LAST:event_updateCityButtonActionPerformed

    private void deleteCityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city to view");
        }
        else{
            DefaultTableModel cityTableModel = (DefaultTableModel) cityTable.getModel();
            String cityOBJ = (String) cityTableModel.getValueAt(selectedRowIndex, 0);
            for(City c: newSystem.getCityList()){
                if(c.getCityName().equals(cityOBJ)){
                    cd = c;
                }
            }
            newSystem.getCityList().remove(cd);
            showCityTable();
        }
    }//GEN-LAST:event_deleteCityButtonActionPerformed

    private void addCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommunityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = cityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a city");
        }
        else{
            boolean flagg = true;
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    if(com.getComName().equals(communityInput.getText())){
                        flagg = false;
                    }
                }
            }
            if(!flagg){
                JOptionPane.showMessageDialog(this, "Community already Exists");
            }
            else{
                newSystem.addCity(String.valueOf(cityInput.getText()));
                DefaultTableModel cityTableModel = (DefaultTableModel) cityTable.getModel();
                String cityName = String.valueOf(cityTableModel.getValueAt(selectedRowIndex, 0));
                for(City c: newSystem.getCityList()){
                    if(c.getCityName().equals(cityName)){
                        getCity = c;
                    }
                }
                Com newCommunity = new Com(String.valueOf(communityInput.getText()));
                getCity.getComList().add(newCommunity);
                showCommunityTable();
            }
        }
    }//GEN-LAST:event_addCommunityButtonActionPerformed

    private void viewCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCommunityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to view");
        }
        else{
            DefaultTableModel communityTableModel = (DefaultTableModel) communityTable.getModel();
            String communityOBJ = String.valueOf(communityTableModel.getValueAt(selectedRowIndex, 1));
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    if(com.getComName() == communityOBJ){
                        communityView = com;
                    }
                }
            }
            communityInput.setText(communityView.getComName());
        }
    }//GEN-LAST:event_viewCommunityButtonActionPerformed

    private void updateCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCommunityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to update");
        }
        else{
            DefaultTableModel communityTableModel = (DefaultTableModel) communityTable.getModel();
            String communityOBJ = String.valueOf(communityTableModel.getValueAt(selectedRowIndex, 1));
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    if(com.getComName() == communityOBJ){
                        communityView = com;
                    }
                }
            }
            communityView.setComName(String.valueOf(communityInput.getText()));
            showCommunityTable();
        }
    }//GEN-LAST:event_updateCommunityButtonActionPerformed

    private void deleteCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCommunityButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = communityTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a community to delete !!!");
        }
        else{
            DefaultTableModel communityTableModel = (DefaultTableModel) communityTable.getModel();
            String communityOBJ = String.valueOf(communityTableModel.getValueAt(selectedRowIndex, 1));
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    if(com.getComName().equals(communityOBJ)){
                        cd = c;
                        cmd = com;
                    }
                }
            }
            cd.getComList().remove(cmd);
            showCommunityTable();
        }
    }//GEN-LAST:event_deleteCommunityButtonActionPerformed

    private void addVitalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVitalsButtonActionPerformed
        // TODO add your handling code here:

        int counter = 0;
        if(patientCreateTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Select a Patient");
        }
        else{
            long patientIDCheck = (long)personADirModel.getValueAt(patientCreateTable.getSelectedRow(), 1);
            for(Pat i: patientList){
                if(patientIDCheck == i.getPid()){
                    patientAdd = i;
                }
            }
            if(!parser.isInteger(BPInput.getText()) && !parser.checkNull(BPInput.getText())){
                JOptionPane.showMessageDialog(this, "Check Blood Pressure and try again");
            }
            else{
                bloodPressure = Float.parseFloat(BPInput.getText());
                counter++;
            }
            if(!parser.isInteger(HRInput.getText()) && !parser.checkNull(HRInput.getText())){
                JOptionPane.showMessageDialog(this, "Check HeartBeat and try again");
            }
            else{
                heartRate = Float.parseFloat(HRInput.getText());
                counter++;
            }
            if(!parser.isInteger(weightInput.getText()) && !parser.checkNull(weightInput.getText())){
                JOptionPane.showMessageDialog(this, "Check weight and try again");
            }
            else{
                weight = Float.parseFloat(weightInput.getText());
                counter++;
            }
            String symptoms = symptomsInput.getText();

            if(counter ==3){
                patientAdd.getEncounterHistory().addEncounter(new VitalSigns(bloodPressure, heartRate, weight, symptoms));
                JOptionPane.showMessageDialog(this, "Visit saved");
                BPInput.setText("");
                HRInput.setText("");
                weightInput.setText("");
                symptomsInput.setText("");
            }
        }
    }//GEN-LAST:event_addVitalsButtonActionPerformed

    private void backEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backEncounterActionPerformed
        // TODO add your handling code here:
        systemAdminPanel.setVisible(true);
        manageEncounterPanel.setVisible(false);
    }//GEN-LAST:event_backEncounterActionPerformed

    private void viewEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncounterButtonActionPerformed
        // TODO add your handling code here:
        encounterModel = (DefaultTableModel) encounterTable.getModel();
        encounterModel.setRowCount(0);

        long patientID = (long)personVDirModel.getValueAt(patientViewTable.getSelectedRow(), 1);
        patientList = patientDirectory.getPatList();
        for(Pat p: patientList){
            if(patientID == p.getPid()){
                selectedPatient = p;
            }
        }
        for(Encounter e: selectedPatient.getPatEncounterHistory()){
            Object[] row = new Object[6];
            row[0] = selectedPatient.getPerson().getName();
            row[1] = selectedPatient.getPid();
            row[2] = e.getEid();
            row[3] = e.getVitals().getBloodPressure();
            row[4] = e.getVitals().getHeartBeat();
            row[5] = e.getVitals().getBodyWeight();
            encounterModel.addRow(row);
        }
    }//GEN-LAST:event_viewEncounterButtonActionPerformed

    private void viewDeleteEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDeleteEncounterButtonActionPerformed
        // TODO add your handling code here:
        encounterChangeModel = (DefaultTableModel) encounterChangeTable.getModel();
        encounterChangeModel.setRowCount(0);

        long patientID = (long)personVDDirModel.getValueAt(patientViewDTable.getSelectedRow(), 1);
        patientList = patientDirectory.getPatList();
        for(Pat p: patientList){
            if(patientID == p.getPid()){
                selectedPatient = p;
            }
        }
        for(Encounter e: selectedPatient.getPatEncounterHistory()){
            Object[] row = new Object[6];
            row[0] = selectedPatient.getPerson().getName();
            row[1] = selectedPatient.getPid();
            row[2] = e.getEid();
            row[3] = e.getVitals().getBloodPressure();
            row[4] = e.getVitals().getHeartBeat();
            row[5] = e.getVitals().getBodyWeight();
            encounterChangeModel.addRow(row);
        }
    }//GEN-LAST:event_viewDeleteEncounterButtonActionPerformed

    private void updateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEncounterActionPerformed
        // TODO add your handling code here:
        encounterModel = (DefaultTableModel) encounterChangeTable.getModel();
        
        if(encounterChangeTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Select row to update");
        }
        else{
            long encounterID = (long)encounterModel.getValueAt(encounterChangeTable.getSelectedRow(), 2);
            String encounterInpUpdate = encounterUpdateFieldText.getText().toString();
            for(Encounter e: selectedPatient.getPatEncounterHistory()){
                if(e.getEid() == encounterID){
                    selectedPatVitalSigns = e.getVitals();
                }
            }
            String encounterUpdateFilter = encounterUpdateFilterBox.getSelectedItem().toString();
            if(encounterUpdateFilter == " "){
                JOptionPane.showMessageDialog(this, "");
            }
            else{
                if(encounterUpdateFilter == "bloodPressure"){
                    float encounterUpdate = Float.parseFloat(encounterInpUpdate);
                    selectedPatVitalSigns.setBloodPressure(encounterUpdate);
                    showVitalsTable();
                }
                if(encounterUpdateFilter == "heartRate"){
                    float encounterUpdate = Float.parseFloat(encounterInpUpdate);
                    selectedPatVitalSigns.setHeartBeat(encounterUpdate);
                    showVitalsTable();
                }
                if(encounterUpdateFilter == "weight"){
                    float encounterUpdate = Float.parseFloat(encounterInpUpdate);
                    selectedPatVitalSigns.setBodyWeight(encounterUpdate);
                    showVitalsTable();
                }
            }
        }
    }//GEN-LAST:event_updateEncounterActionPerformed

    private void deleteEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEncounterButtonActionPerformed
        // TODO add your handling code here:
        encounterModel = (DefaultTableModel) encounterChangeTable.getModel();
        int selectedRowIndex = encounterChangeTable.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Select a row to delete");
        }
        else{
            long encounterID = (long)encounterModel.getValueAt(encounterChangeTable.getSelectedRow(), 2);
            encounterList = encounterHistory.getEncounterList();
            for(Encounter e: selectedPatient.getPatEncounterHistory()){
                if(encounterID == e.getEid()){
                    encounter = e;
                }
            }
            selectedPatient.getEncounterHistory().DeleteEncounter(encounter);
            JOptionPane.showMessageDialog(this, "Encounter removed");
            showVitalsTable();
        }
    }//GEN-LAST:event_deleteEncounterButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        selectedCommunity = String.valueOf(communityDropbox.getSelectedItem());
        for(Com c: city.getComList()){
            if(selectedCommunity == c.getComName()){
                community = c;
            }
        }
        populateHospitalTable();
        hospitalCommunityInput.setText(community.getComName());
        hospitalCityInput.setText(city.getCityName());
    }//GEN-LAST:event_searchButtonActionPerformed

    private void updateHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateHospitalActionPerformed
        // TODO add your handling code here:

        if(hospitalTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "");
        }
        else{
            int hospitalID = (int)hospitalTableModel.getValueAt(hospitalTable.getSelectedRow(), 0);
            String houseInpUpdate = hospitalUpdateFieldText.getText().toString();
            for(Com c: city.getComList()){
                for(Hosp h: c.getHospitalList()){
                    if(hospitalID == h.getHospNum()){
                        hospital = h;
                    }
                }
            }
            String hospitalUpdateFilter = hospitalUpdateFilterBox.getSelectedItem().toString();
            if(hospitalUpdateFilter == " "){
                JOptionPane.showMessageDialog(this, "");
            }
            else{
                if(hospitalUpdateFilter == "streetName"){
                    String hospUpdate = houseInpUpdate;
                    hospital.setStreetName(hospUpdate);
                    populateHospitalTable();
                }
                
            }
        }
    }//GEN-LAST:event_updateHospitalActionPerformed

    private void hospitalNumberInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalNumberInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalNumberInputActionPerformed

    private void hospitalStreetNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalStreetNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalStreetNameInputActionPerformed

    private void hospitalCommunityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalCommunityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalCommunityInputActionPerformed

    private void hospitalCityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalCityInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalCityInputActionPerformed

    private void createHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHospitalActionPerformed
        // TODO add your handling code here:
        boolean hospitalNumberCheck = false;
        int hospitalNumberCreate = Integer.parseInt(hospitalNumberInput.getText());
        for (Hosp h: community.getHospitalList()){
            if(h.getHospNum() == hospitalNumberCreate){
                JOptionPane.showMessageDialog(this,"This Hospital Already Exists");
                hospitalNumberCheck = true;
            }
        }
        if(!hospitalNumberCheck){
            String hospitalStreetNameCreate = hospitalStreetNameInput.getText();
            String hospitalCommunityCreate = hospitalCommunityInput.getText();
            String hospitalCityCreate = hospitalCityInput.getText();
            
            hospitalDirectory.createHosp(hospitalNumberCreate, hospitalStreetNameCreate, hospitalCommunityCreate, hospitalCityCreate);
            community.createHospital(hospitalNumberCreate, hospitalStreetNameCreate, hospitalCommunityCreate, hospitalCityCreate);
            populateHospitalTable();

            JOptionPane.showMessageDialog(this,"New Hospital added with HospitalID" + hospitalNumberCreate);

            hospitalNumberInput.setText("");
            hospitalStreetNameInput.setText("");
            
        }
    }//GEN-LAST:event_createHospitalActionPerformed

    private void deleteHospitalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHospitalButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = hospitalTable.getSelectedRow();
        boolean flagg = true;
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Select a row to view hospital info");
        }
        else{
            DefaultTableModel manageHospitalModel = (DefaultTableModel) hospitalTable.getModel();
            int hospitalOBJ = (int) manageHospitalModel.getValueAt(selectedRowIndex, 0);
            for(Hosp h: hospitalDirectory.getHospList()){
                if(h.getHospNum() == hospitalOBJ && (h.getDoctorHosp().size() == 0)){
                    delHosp = h;
                    flagg = false;
                }
            }
            hospitalDirectory.getHospList().remove(delHosp);
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    for(Hosp h: com.getHospitalList()){
                        if(h.getHospNum() == delHosp.getHospNum()){
                            communityDelHospital = com;
                        }
                    }
                }
            }
            communityDelHospital.getHospitalList().remove(delHosp);
            hospitalTableModel = (DefaultTableModel) hospitalTable.getModel();
            hospitalTableModel.setRowCount(0);
            for(Hosp h: hospitalDirectory.getHospList()){
                Object[] row = new Object[5];
                row[0] = h.getHospNum();
                row[1] = h.getStreetName();
                row[2] = h.getCom();
                row[3] = h.getCity();
                row[4] = (h.getDoctorHosp().size());
                hospitalTableModel.addRow(row);
            }
        }
        if(flagg == true){
            JOptionPane.showMessageDialog(this,"Cannot delete hospital with patients assigned");
        }
    }//GEN-LAST:event_deleteHospitalButtonActionPerformed

    private void assignDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignDoctorActionPerformed
        // TODO add your handling code here:

        if(managePersonTable.getSelectedRow()<0){
            JOptionPane.showMessageDialog(this, "Select a person to add");
        }
        if(hospitalNumbers.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Select a hospital to add doctor");
        }
        else{
            long personNumber = (long)managePersonModel.getValueAt(managePersonTable.getSelectedRow(),3);
            for(Person p : personDirectory.getPersonList()){
                if(personNumber == p.getMob()){
                    selectedPerson = p;
                }
            }
            for(Hosp h : hospitalDirectory.getHospList()){
                if(Integer.parseInt((String)hospitalNumbers.getSelectedItem()) == h.getHospNum()){
                    selectedHospital = h;
                }
            }
            boolean doctorCheck = false;
            for(Pat p: patientDirectory.getPatList()){
                if(p.matchByContact(selectedPerson.getMob())){
                    JOptionPane.showMessageDialog(this, "This Person is a Patient and cannot become Doctor");
                    doctorCheck = true;
                }
            }
            if(!doctorCheck){
                Doc new_doc = selectedHospital.addDoctorToHospital(new Doc(selectedPerson));
                doctorDirectory.addDoc(new_doc);
                JOptionPane.showMessageDialog(this, "Added " + selectedPerson.getName() + " to Hospital");
                doctorCheck = false;
            }
            populateManageTable();
        }
    }//GEN-LAST:event_assignDoctorActionPerformed

    private void deleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = manageDoctorTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view hospital info");
        }
        else{
            long doctorOBJ = (long) manageDoctorModel.getValueAt(selectedRowIndex, 0);
            manageDoctorModel = (DefaultTableModel) manageDoctorTable.getModel();
            for(Doc d: doctorDirectory.getDocList()){
                if(doctorOBJ == d.getDid()){
                    dltDoctor = d;
                }
            }
            doctorDirectory.getDocList().remove(dltDoctor);
            for(City c: newSystem.getCityList()){
                for(Com com: c.getComList()){
                    for(Hosp h: com.getHospitalList()){
                            hospitalDuplicate = h;
                    }
                }
            }
            if(hospitalDuplicate.getDoctorHosp().contains(dltDoctor)){
                hospitalDuplicate.getDoctorHosp().remove(dltDoctor);
                JOptionPane.showMessageDialog(this, "Doctor " + dltDoctor.getPerson().getName() + " deleted");
            }
            
            populateManageTable();
        }
    }//GEN-LAST:event_deleteDoctorActionPerformed

    private void backHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backHospitalActionPerformed
        // TODO add your handling code here:
        systemAdminPanel.setVisible(true);
        manageHospitalPanel.setVisible(false);
        populateHospitalTable1();
    }//GEN-LAST:event_backHospitalActionPerformed

    private void backDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backDoctorActionPerformed
        // TODO add your handling code here:
        systemAdminPanel.setVisible(true);
        manageDoctorPanel.setVisible(false);
    }//GEN-LAST:event_backDoctorActionPerformed

    public void showPersonTable(){
        DefaultTableModel managePersonModel = (DefaultTableModel) personTable.getModel();
        managePersonModel.setRowCount(0);
        DefaultTableModel managePatientPersonModel = (DefaultTableModel) managePatientPersonTable.getModel();
        managePatientPersonModel.setRowCount(0);
        
        for (Person person : personDirectory.getPersonList()) {
            Object[] row = new Object[5];
            row[0] = person;
            row[1] = person.getAge();
            row[2] = person.getDob();
            row[3] = person.getMob();
            row[4] = person.getCom();
            managePersonModel.addRow(row);
            managePatientPersonModel.addRow(row);
        }
    }
    
    public void showPatientTable(){
        DefaultTableModel managePatientModel = (DefaultTableModel) patientTable.getModel();
        managePatientModel.setRowCount(0);
        
        for (Pat patient : patientDirectory.getPatList()) {
            Object[] row = new Object[4];
            row[0] = patient.getPerson().getName();
            row[1] = patient.getPid();
            row[2] = patient.getPerson().getAge();
            row[3] = patient.getPerson().getCom();
            managePatientModel.addRow(row);
        }
    }
    
    public void showCityTable(){
        DefaultTableModel manageCityModel = (DefaultTableModel) cityTable.getModel();
        manageCityModel.setRowCount(0);
        
        for (City city : newSystem.getCityList()) {
            Object[] row = new Object[1];
            row[0] = city.getCityName();
            manageCityModel.addRow(row);
        }
    }
    
    public void showCommunityTable(){
        DefaultTableModel manageCommunityModel = (DefaultTableModel) communityTable.getModel();
        manageCommunityModel.setRowCount(0);
        
        for (City city : newSystem.getCityList()){
            for (Com community: city.getComList()){
                Object[] row = new Object[2];
                row[0] = city.getCityName();
                row[1] = community.getComName();
                manageCommunityModel.addRow(row);
            }
        }
    }
    
    public void populatePatientTable(){
        personADirModel = (DefaultTableModel) patientCreateTable.getModel();
        personADirModel.setRowCount(0);
        personVDirModel = (DefaultTableModel) patientViewTable.getModel();
        personVDirModel.setRowCount(0);
        personVDDirModel = (DefaultTableModel) patientViewDTable.getModel();
        personVDDirModel.setRowCount(0);
        
        for(Pat p: patientDirectory.getPatList()){
            Object[] row = new Object[4];
            row[0] = p.getPerson().getName();
            row[1] = p.getPid();
            row[2] = p.getPerson().getAge();
            row[3] = p.getPerson().getCom();
            personADirModel.addRow(row);
            personVDirModel.addRow(row);
            personVDDirModel.addRow(row);
        }
    }
    
    public void showVitalsTable(){
        encounterModel = (DefaultTableModel) encounterChangeTable.getModel();
        encounterModel.setRowCount(0);
        for(Encounter e: selectedPatient.getPatEncounterHistory()){
            Object[] row = new Object[6];
            row[0] = selectedPatient.getPerson().getName();
            row[1] = selectedPatient.getPid();
            row[2] = e.getEid();
            row[3] = e.getVitals().getBloodPressure();
            row[4] = e.getVitals().getHeartBeat();
            row[5] = e.getVitals().getBodyWeight();
            encounterModel.addRow(row);
        }
    }
    
    public void populateHospitalTable(){
        hospitalTableModel.setRowCount(0);
        for(Com c: city.getComList()){
            if(selectedCommunity == c.getComName()){
                community = c;
            }
        }
        for(Hosp h: community.getHospitalList()){
            Object[] row = new Object[5];
            row[0] = h.getHospNum();
            row[1] = h.getStreetName();
            
            row[2] = h.getCom();
            row[3] = h.getCity();
            row[4] = (h.getDoctorHosp().size());
            hospitalTableModel.addRow(row);
        }
    }
    
    public void populateHospitalTable1(){
        hospitalTableModel = (DefaultTableModel) hospitalTable.getModel();
        hospitalTableModel.setRowCount(0);
        for(City c: newSystem.getCityList()){
            for(Com com: c.getComList()){
                for(Hosp h: com.getHospitalList()){
                    Object[] row = new Object[5];
                    row[0] = h.getHospNum();
                    row[1] = h.getStreetName();
                    row[2] = h.getCom();
                    row[3] = h.getCity();
                    row[4] = (h.getDoctorHosp().size());
                    hospitalTableModel.addRow(row);
                }
            }
        }
    }
    
    public void populateManageTable(){
        manageDoctorModel = (DefaultTableModel) manageDoctorTable.getModel();
        managePersonModel = (DefaultTableModel) managePersonTable.getModel();
        manageDoctorModel.setRowCount(0);
        managePersonModel.setRowCount(0);
        long[] doctorCountNumber = new long[doctorDirectory.getDocList().size()];
        for(int i=0; i<(doctorDirectory.getDocList()).size(); i++){
            doctorCountNumber[i] = doctorDirectory.getDocList().get(i).getPerson().getMob();
        }
        for (Person p : personDirectory.getPersonList()) {
            boolean a = true;
            for(long i : doctorCountNumber){
                if(i == p.getMob()){
                    a = false;
                }
            }
            if(a == true){
                Object[] row = new Object[4];
                row[0] = p.getName();
                row[1] = p.getDob();
                row[2] = p.getCom();
                row[3] = p.getMob();
                managePersonModel.addRow(row);
                a = true;
            }
        }
        for(Doc d: doctorDirectory.getDocList()){
            Object[] row = new Object[5];
            row[0] = d.getDid();
            row[1] = d.getPerson().getName();
            row[2] = d.getPerson().getAge();
            row[3] = d.getPerson().getCom();
            row[4] = d.getPerson().getMob();
            manageDoctorModel.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BPInput;
    private javax.swing.JTextField HRInput;
    private javax.swing.JButton addCityButton;
    private javax.swing.JButton addCommunityButton;
    private javax.swing.JButton addPersonHouseButton;
    private javax.swing.JButton addVitalsButton;
    private javax.swing.JButton assignDoctor;
    private javax.swing.JButton backDoctor;
    private javax.swing.JButton backEncounter;
    private javax.swing.JButton backHospital;
    private javax.swing.JButton backPatient;
    private javax.swing.JButton backPerson;
    private javax.swing.JLabel bloodPressureText;
    private javax.swing.JTextField cityInput;
    private javax.swing.JTable cityTable;
    private javax.swing.JLabel cityText;
    private javax.swing.JComboBox<String> communityDropbox;
    private javax.swing.JTextField communityInput;
    private javax.swing.JTable communityTable;
    private javax.swing.JLabel communityText;
    private javax.swing.JButton createHospital;
    private javax.swing.JButton createPatientButton;
    private javax.swing.JButton createPersonButton;
    private javax.swing.JButton deleteCityButton;
    private javax.swing.JButton deleteCommunityButton;
    private javax.swing.JButton deleteDoctor;
    private javax.swing.JPanel deleteEncounter;
    private javax.swing.JButton deleteEncounterButton;
    private javax.swing.JButton deleteHospitalButton;
    private javax.swing.JButton deletePatientButton;
    private javax.swing.JButton deletePersonButton;
    private javax.swing.JPanel doctorPanel;
    private javax.swing.JTabbedPane doctorTabPane;
    private javax.swing.JTable encounterChangeTable;
    private javax.swing.JTable encounterTable;
    private javax.swing.JTextField encounterUpdateFieldText;
    private javax.swing.JComboBox<String> encounterUpdateFilterBox;
    private javax.swing.JLabel heartRateText;
    private javax.swing.JTextField hospitalCityInput;
    private javax.swing.JTextField hospitalCommunityInput;
    private javax.swing.JTextField hospitalNumberInput;
    private javax.swing.JComboBox<String> hospitalNumbers;
    private javax.swing.JTextField hospitalStreetNameInput;
    private javax.swing.JTable hospitalTable;
    private javax.swing.JTextField hospitalUpdateFieldText;
    private javax.swing.JComboBox<String> hospitalUpdateFilterBox;
    private javax.swing.JComboBox<String> houseListDropbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton manageCity;
    private javax.swing.JPanel manageCityCommunityPanel;
    private javax.swing.JButton manageDoctor;
    private javax.swing.JPanel manageDoctorPanel;
    private javax.swing.JTable manageDoctorTable;
    private javax.swing.JButton manageEncounter;
    private javax.swing.JPanel manageEncounterPanel;
    private javax.swing.JButton manageHospital;
    private javax.swing.JPanel manageHospitalPanel;
    private javax.swing.JButton managePatient;
    private javax.swing.JPanel managePatientPanel;
    private javax.swing.JTable managePatientPersonTable;
    private javax.swing.JButton managePerson;
    private javax.swing.JPanel managePersonPanel;
    private javax.swing.JTable managePersonTable;
    private javax.swing.JPanel newEncounter;
    private javax.swing.JTextField patientAgeInput;
    private javax.swing.JLabel patientAgeText;
    private javax.swing.JTable patientCreateTable;
    private javax.swing.JTextField patientIDInput;
    private javax.swing.JLabel patientIDText;
    private javax.swing.JTextField patientNameInput;
    private javax.swing.JLabel patientNameText;
    private javax.swing.JTable patientTable;
    private javax.swing.JTable patientViewDTable;
    private javax.swing.JTable patientViewTable;
    private javax.swing.JTextField personAgeInput;
    private javax.swing.JLabel personAgeText;
    private javax.swing.JComboBox<String> personCommunityDropbox;
    private javax.swing.JLabel personCommunityText;
    private javax.swing.JTextField personContactInput;
    private javax.swing.JLabel personContactText;
    private javax.swing.JTextField personDOBInput;
    private javax.swing.JLabel personDOBText;
    private javax.swing.JTextField personNameInput;
    private javax.swing.JLabel personNameText;
    private javax.swing.JTable personTable;
    private javax.swing.JPanel previousEncounter;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField symptomsInput;
    private javax.swing.JLabel symptomsText;
    private javax.swing.JTextField systemAdminIDField;
    private javax.swing.JLabel systemAdminIDText;
    private javax.swing.JPanel systemAdminLoginPanel;
    private javax.swing.JPanel systemAdminPanel;
    private javax.swing.JTextField systemAdminPasswordField;
    private javax.swing.JLabel systemAdminPasswordText;
    private javax.swing.JButton updateCityButton;
    private javax.swing.JButton updateCommunityButton;
    private javax.swing.JButton updateEncounter;
    private javax.swing.JButton updateHospital;
    private javax.swing.JButton updatePatientButton;
    private javax.swing.JButton updatePersonButton;
    private javax.swing.JButton viewCityButton;
    private javax.swing.JButton viewCommunityButton;
    private javax.swing.JButton viewDeleteEncounterButton;
    private javax.swing.JButton viewEncounterButton;
    private javax.swing.JButton viewPatientButton;
    private javax.swing.JButton viewPersonButton;
    private javax.swing.JTextField weightInput;
    private javax.swing.JLabel weightText;
    // End of variables declaration//GEN-END:variables
}
