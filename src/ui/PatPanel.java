/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Parser.Parser;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Com;
import model.Doc;
import model.DocDir;
import model.Hosp;
import model.HospDir;
import model.Pat;
import model.PatDir;
import model.Person;

/**
 *
 * @author kalindjoshi
 */
public class PatPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatPanel
     */
     Com com = new Com();
    Pat pat =new Pat();
    ArrayList<Com> comList;
    ArrayList<Pat> patList;
    Parser parser = new Parser();
    PatDir patDir; 
    Hosp newHosp;
    ArrayList<Doc> docs;
    String patCom = "";
    City city;
    Com Comm;
    HospDir hospDir;
    Doc dd;
    Hosp hh;
    DefaultTableModel model;
    DocDir docDir;
    Pat patD;
    Doc docP;
    
    ArrayList<Hosp> arr_hosp;
    
    public PatPanel() {
        initComponents();
    }
    
   public PatPanel(String[] communityList, PatDir patDir, Hosp newHospital, City city, HospDir hospDir, DocDir docDir) {
        initComponents();  
        this.patDir = patDir;
        this.newHosp = newHospital;
        this.city = city;
        this.hospDir = hospDir;
        this.docDir = docDir;
        
        model = (DefaultTableModel) DocTable.getModel();
        model.setRowCount(0);
        
        PersonDrop.removeAllItems();
        
       
        for(Com commList:city.getComList()){
            PersonDrop.addItem(commList.getComName());
        }
        
        PersonDrop.removeAllItems();
        PersonDrop.addItem(" ");
        for(Com com: city.getComList())
        {
            PersonDrop.addItem(com.getComName());
        }
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Heading = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jTable = new javax.swing.JScrollPane();
        DocTable = new javax.swing.JTable();
        DocView = new javax.swing.JButton();
        Appoint = new javax.swing.JButton();
        DrNameLbl = new javax.swing.JLabel();
        DrIdLbl = new javax.swing.JLabel();
        HosLbl = new javax.swing.JLabel();
        CommLbl = new javax.swing.JLabel();
        DrNameTxt = new javax.swing.JTextField();
        DrIdTxt = new javax.swing.JTextField();
        HosTxt = new javax.swing.JTextField();
        CommTxt = new javax.swing.JTextField();
        PersonDrop = new javax.swing.JComboBox<>();
        PersonLbl = new javax.swing.JTextField();
        PatIdLbl = new javax.swing.JTextField();
        PatIdTxt = new javax.swing.JTextField();
        Searchbtn = new javax.swing.JButton();
        LoginLandBtn = new javax.swing.JButton();

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font(".AppleSystemUIFont", 3, 18)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("Available doctors for your area:");
        Heading.setViewportView(jTextArea2);

        DocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Dr. Name", "Dr. ID", "Hospital ID", "Community"
            }
        ));
        jTable.setViewportView(DocTable);

        DocView.setText("View");
        DocView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocViewActionPerformed(evt);
            }
        });

        Appoint.setText("Book patient appointment");
        Appoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointActionPerformed(evt);
            }
        });

        DrNameLbl.setText("Dr. Name");

        DrIdLbl.setText("Dr. ID");

        HosLbl.setText("Hospital ID");

        CommLbl.setText("Community");

        HosTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HosTxtActionPerformed(evt);
            }
        });

        PersonDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select community", "Allston", "Roslindale", " " }));

        PersonLbl.setText("Person Search");

        PatIdLbl.setText("Patient ID");

        PatIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatIdTxtActionPerformed(evt);
            }
        });

        Searchbtn.setText("Search");
        Searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbtnActionPerformed(evt);
            }
        });

        LoginLandBtn.setText("Login to see your reports");
        LoginLandBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginLandBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(296, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Searchbtn)
                        .addGap(234, 234, 234))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(LoginLandBtn)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTable)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(PersonLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(126, 126, 126))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Appoint)
                                        .addGap(18, 18, 18)
                                        .addComponent(DocView)
                                        .addGap(31, 31, 31)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(PersonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(PatIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(19, 19, 19)
                                    .addComponent(PatIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(135, 135, 135)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CommLbl)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(DrNameLbl)
                                            .addComponent(DrIdLbl))
                                        .addGap(9, 9, 9)))
                                .addComponent(HosLbl))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DrNameTxt)
                                .addComponent(DrIdTxt)
                                .addComponent(HosTxt)
                                .addComponent(CommTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(LoginLandBtn)
                .addGap(52, 52, 52)
                .addComponent(Searchbtn)
                .addContainerGap(422, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(46, 46, 46)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PersonLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PatIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PatIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(PersonDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                    .addComponent(jTable, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Appoint)
                        .addComponent(DocView))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DrNameLbl)
                        .addComponent(DrNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DrIdLbl)
                                .addComponent(DrIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(HosLbl)
                                .addComponent(HosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(CommLbl))
                        .addComponent(CommTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(10, 10, 10)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void HosTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HosTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HosTxtActionPerformed

    private void PatIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatIdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PatIdTxtActionPerformed

    private void DocViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocViewActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = DocTable.getSelectedRow();
        if (selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Select a row and try again");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) DocTable.getModel();
            long did = (long)model.getValueAt(DocTable.getSelectedRow(), 1);
            for(Hosp h: hospDir.getHospList()){
                for(Doc d:h.getDoctorHosp()){
                    if(d.getDid() == did){
                        hh = h;
                        dd = d;
                    }
                }
            }
        
            DrIdTxt.setText(String.valueOf(dd.getDid()));
            DrNameTxt.setText(String.valueOf((dd.getPerson().getName())));
            CommTxt.setText(String.valueOf(dd.getPerson().getCom()));
            HosTxt.setText(String.valueOf(hh.getHospNum()));
        }      
    }//GEN-LAST:event_DocViewActionPerformed

    private void SearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbtnActionPerformed
        // TODO add your handling code here:
        System.out.println(PatIdTxt.getText());
        System.out.println(PersonDrop.getSelectedItem().toString());
        
        if(PatIdTxt.getText().isEmpty() && PersonDrop.getSelectedItem().toString() == " "){
            JOptionPane.showMessageDialog(this, "Cannot keep both options empty");
        }
        else if(!PatIdTxt.getText().isEmpty() && PersonDrop.getSelectedItem().toString() != " "){
            System.out.println("patient_id.getText(): "+PatIdTxt.getText());
            System.out.println("doctor_community_dropbox.getSelectedItem().toString(): "+PersonDrop.getSelectedItem().toString());
            JOptionPane.showMessageDialog(this, "Please Use only one option");
        }
        else{
            if(!PatIdTxt.getText().isEmpty()){
            patList = patDir.getPatList();
            for(int i=0; i<patList.size();i++){
                System.out.println("Inside Pat Dir traversal");
                System.out.println(patList.get(i).getPerson().getName());
                if(Integer.parseInt(PatIdTxt.getText()) == patList.get(i).getPid() ){
                    Person p = patList.get(i).getPerson();
                    patCom = p.getCom();
                    System.out.println("Patient belongs to:"+patCom);
                    }     
                }
            if(patCom == ""){
                JOptionPane.showMessageDialog(this, "Patient not found");
            }
            else{
               
                Com a;
          
                ArrayList<Doc> doc_hosp_comm;
                
                ArrayList<Com> arr_comm =city.getComList();
                for(Com i : arr_comm){
                    if(i.getComName() == patCom){
                         arr_hosp= i.getHospitalList();
                    }
                }
                              
                for(Hosp j:arr_hosp){
                    doc_hosp_comm = j.getDoctorHosp();
                    
                    DefaultTableModel model = (DefaultTableModel) DocTable.getModel();
                    model.setRowCount(0);
                    
                    for(Doc i: doc_hosp_comm){
                        Object[] row = new Object[4];
                        row[0] = i.getPerson().getName();
                        row[1] = i.getDid();
                        row[2] = patCom;
                        row[3] = j.getHospNum();
                        model.addRow(row);
                    }
                }
         
                         
            }
            
          }//end if search by pid
            
          if(PersonDrop.getSelectedItem().toString() != " "){
              
               String searchDoctorComm = PersonDrop.getSelectedItem().toString();
               for(Com c: city.getComList()){
                   if(c.getComName() == searchDoctorComm)
                       com = c;
               }
               
               DefaultTableModel model = (DefaultTableModel) DocTable.getModel();
               model.setRowCount(0);
               
               for(Hosp h: com.getHospitalList()){
                   for(Doc d : h.getDoctorHosp()){
                       Object[] row = new Object[4];
                        row[0] = d.getPerson().getName();
                        row[1] = d.getDid();
                        row[2] = searchDoctorComm;
                        row[3] = h.getHospNum();
                        model.addRow(row);
                   }
               }
          }
            
        }                                          

    }//GEN-LAST:event_SearchbtnActionPerformed

    private void AppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointActionPerformed
        // TODO add your handling code here:
       if(DocTable.getSelectedRow()>=0 && !(PatIdTxt.getText().isEmpty()))
       {
           long choosedoc = (long) model.getValueAt(DocTable.getSelectedRow(), 1);
           long PatId = Long.parseLong(PatIdTxt.getText());
           for(Pat pat: patDir.getPatList()){
                if(PatId == pat.getPid()){
                    patD = pat;
                }
            }
            for(Doc doc: docDir.getDocList()){
                if(choosedoc == doc.getDid()){
                    docP = doc;
                    if(!(doc.getPD().contains(docP))){
                        doc.AppointPat(patD);
                        JOptionPane.showMessageDialog(this, "Booked Appointment with Dr.");
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Select a doctor to book appointment");
                    }
                }
            }
                
       }
       else{
           JOptionPane.showMessageDialog(this, "You need to be a patient to book appointment");
       }
        
    }//GEN-LAST:event_AppointActionPerformed

    private void LoginLandBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginLandBtnActionPerformed
        // TODO add your handling code here:
        PatPanel2 patpanel2 = new PatPanel2();
        patpanel2.setVisible(true);
        
    }//GEN-LAST:event_LoginLandBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Appoint;
    private javax.swing.JLabel CommLbl;
    private javax.swing.JTextField CommTxt;
    private javax.swing.JTable DocTable;
    private javax.swing.JButton DocView;
    private javax.swing.JLabel DrIdLbl;
    private javax.swing.JTextField DrIdTxt;
    private javax.swing.JLabel DrNameLbl;
    private javax.swing.JTextField DrNameTxt;
    private javax.swing.JScrollPane Heading;
    private javax.swing.JLabel HosLbl;
    private javax.swing.JTextField HosTxt;
    private javax.swing.JButton LoginLandBtn;
    private javax.swing.JTextField PatIdLbl;
    private javax.swing.JTextField PatIdTxt;
    private javax.swing.JComboBox<String> PersonDrop;
    private javax.swing.JTextField PersonLbl;
    private javax.swing.JButton Searchbtn;
    private javax.swing.JScrollPane jTable;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
